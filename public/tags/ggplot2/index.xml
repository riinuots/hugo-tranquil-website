<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ggplot2 on Riinu&#39;s scripting diary</title>
    <link>https://riinu.me/tags/ggplot2/</link>
    <description>Recent content in ggplot2 on Riinu&#39;s scripting diary</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 25 Feb 2022 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://riinu.me/tags/ggplot2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>World map using ggplot2 and an equal-area projection</title>
      <link>https://riinu.me/2022/02/world-map-ggplot2/</link>
      <pubDate>Fri, 25 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://riinu.me/2022/02/world-map-ggplot2/</guid>
      <description>
&lt;script src=&#34;https://riinu.me/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;There are of different ways to make maps in R, ad I always have to look this up and figure this out again from previous examples that I’ve used.
Today I had another look at what’s currently possible and what’s an easy way of making a world map in ggplot2 that doesn’t require fetching data from various places.&lt;/p&gt;
&lt;p&gt;TLDR: Copy this code to plot a world map using ggplot2:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(ggthemes)

world_map = map_data(&amp;quot;world&amp;quot;) %&amp;gt;% 
  filter(! long &amp;gt; 180)

countries = world_map %&amp;gt;% 
  distinct(region) %&amp;gt;% 
  rowid_to_column()

countries %&amp;gt;% 
  ggplot(aes(fill = rowid, map_id = region)) +
  geom_map(map = world_map) +
  expand_limits(x = world_map$long, y = world_map$lat) +
  theme_map() +
  coord_map(&amp;quot;moll&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://riinu.me/post/2022-02-25-world_map_ggplot2_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;2304&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;explanation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Explanation&lt;/h1&gt;
&lt;p&gt;To make a map using &lt;code&gt;geom_map()&lt;/code&gt; you’ll need two datasets: one that includes the map data (country borders), and another one on how to colour in each area.
I tried doing data = NULL or fill = “grey” to make all countries the same colour, but couldn’t get that to work.
So I’m creating the necessary dataset with just &lt;code&gt;distinct(world_map, region)&lt;/code&gt; which is essentially a list of every country in the map data.
The list of countries (=regions) is the first argument to &lt;code&gt;ggplot()&lt;/code&gt;, the &lt;code&gt;world_map&lt;/code&gt; data goes inside &lt;code&gt;geom_map()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

# Load map data
world_map = map_data(&amp;quot;world&amp;quot;)

distinct(world_map, region) %&amp;gt;% 
  ggplot(aes(map_id = region)) +
  geom_map(map = world_map) +
  expand_limits(x = world_map$long, y = world_map$lat)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://riinu.me/post/2022-02-25-world_map_ggplot2_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;expand_limits()&lt;/code&gt; here are essential as otherwise you will not see anything.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;equal-area-projection&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Equal area projection&lt;/h1&gt;
&lt;p&gt;Global maps that do not use an equal area projection are a huge pet peeve of mine.
The above map is not ‘equal-area’ and the closer to the equator an rea is the more diminished it is.&lt;/p&gt;
&lt;p&gt;Let’s just plot Greenland and Algeria for example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tibble(region = c(&amp;quot;Greenland&amp;quot;, &amp;quot;Algeria&amp;quot;)) %&amp;gt;% 
  ggplot(aes(map_id = region)) +
  geom_map(map = world_map) +
  expand_limits(x = world_map$long, y = world_map$lat)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://riinu.me/post/2022-02-25-world_map_ggplot2_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In reality, Algeria is bigger than Greenland (2.4 million km&lt;sup&gt;2&lt;/sup&gt; vs 2.2 million km&lt;sup&gt;2&lt;/sup&gt;)!&lt;/p&gt;
&lt;p&gt;Therefore, I always use an equal-area projection such as Mollweide:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

# Load map data
world_map = map_data(&amp;quot;world&amp;quot;)

distinct(world_map, region) %&amp;gt;% 
  ggplot(aes(map_id = region)) +
  geom_map(map = world_map) +
  expand_limits(x = world_map$long, y = world_map$lat) +
  coord_map(&amp;quot;moll&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://riinu.me/post/2022-02-25-world_map_ggplot2_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;But then we get those weird lines at the northern hemisphere. That’s because parts of the US and Russia extend across the 180th meridian. And since &lt;code&gt;geom_map()&lt;/code&gt; is connecting each area with itself it then draws these lines across the globe.&lt;/p&gt;
&lt;p&gt;A simple fixed I’ve found is to remove map data that has a longitude greater than 180 degrees:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(ggthemes)

world_map = map_data(&amp;quot;world&amp;quot;) %&amp;gt;% 
  filter(! long &amp;gt; 180)

countries = world_map %&amp;gt;% 
  distinct(region) %&amp;gt;% 
  rowid_to_column()

countries %&amp;gt;% 
  ggplot(aes(fill = rowid, map_id = region)) +
  geom_map(map = world_map) +
  expand_limits(x = world_map$long, y = world_map$lat) +
  coord_map(&amp;quot;moll&amp;quot;) +
  theme_map()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://riinu.me/post/2022-02-25-world_map_ggplot2_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I’ve also thrown in &lt;code&gt;theme_map()&lt;/code&gt; from &lt;code&gt;library(ggthemes)&lt;/code&gt; and put the coutry list which I made with &lt;code&gt;distinct()&lt;/code&gt; into a separate object.
This is useful as I’m generally plotting &lt;a href=&#34;https://en.wikipedia.org/wiki/Choropleth_map&#34;&gt;chloropleths&lt;/a&gt; so I want a tibble with values for each country that I can join with whichever data I have for each country (e.g., student numbers, population, etc.).&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Reordering factor levels in R and what could go wrong</title>
      <link>https://riinu.me/2015/06/reordering-factor-levels-in-r-and-what-could-go-wrong/</link>
      <pubDate>Thu, 11 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://riinu.me/2015/06/reordering-factor-levels-in-r-and-what-could-go-wrong/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently started using &lt;a href=&#34;http://docs.ggplot2.org/current/&#34;&gt;ggplot2&lt;/a&gt; in addition to lattice (see &lt;a href=&#34;https://riinudata.wordpress.com/2014/08/08/r-graphical-devices-plot-margins-and-legend-next-to-the-plot-not-on-it/&#34;&gt;this post&lt;/a&gt; that I made a while ago, explaining how I got into using lattice in the first place). Hint: when using ggplot2, you&amp;rsquo;ll need to use of the reshape2 package (also written by the amazing Hadley Wickham) to get your data into a form that ggplot2 works best with. Another thing that you&amp;rsquo;ll want to think about when using ggplo2 is factor levels. This post will show how to (and also how not to) rearrange factor levels in R.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create a quick barplot with strings as x labels.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(ggplot2)

&lt;span style=&#34;color:#75715e&#34;&gt;#create dummy data&lt;/span&gt;
a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;paste&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;my&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;)
b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;
df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(a, b)
df
&lt;span style=&#34;color:#a6e22e&#34;&gt;qplot&lt;/span&gt;(a, b, data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;df, geom&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;, stat&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;identity&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(axis.text&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;element_text&lt;/span&gt;(size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, angle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://riinudata.files.wordpress.com/2015/06/barplot1.png&#34; alt=&#34;barplot1&#34;&gt;&lt;/p&gt;
&lt;p&gt;As df$a is an array of strings, R sets the factor levels alphabetically: my 1, my 10, my 11, my 2&amp;hellip;which is not what we want, so let&amp;rsquo;s rearrange factor levels:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;df&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;factor&lt;/span&gt;(df&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;a, levels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;paste&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;my&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;))
df&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;a
&lt;span style=&#34;color:#a6e22e&#34;&gt;qplot&lt;/span&gt;(a, b, data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;df, geom&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;, stat&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;identity&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(axis.text&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;element_text&lt;/span&gt;(size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, angle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://riinudata.files.wordpress.com/2015/06/barplot2.png&#34; alt=&#34;barplot2&#34;&gt;&lt;/p&gt;
&lt;p&gt;And finally, the wrong way to rearrange factor levels would be by using the levels() function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(a, b)
&lt;span style=&#34;color:#a6e22e&#34;&gt;levels&lt;/span&gt;(df&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;a) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;paste&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;my&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;qplot&lt;/span&gt;(a, b, data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;df, geom&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;, stat&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;identity&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt;(axis.text&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;element_text&lt;/span&gt;(size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, angle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://riinudata.files.wordpress.com/2015/06/barplot3.png&#34; alt=&#34;barplot3&#34;&gt;&lt;/p&gt;
&lt;p&gt;So be careful - if your data is not as obvious as this example and you are a bit new to factors and levels, you might end up plotting wrong results (like on the last example, &amp;ldquo;my 2&amp;rdquo; and &amp;ldquo;my 3&amp;rdquo; were plotted with the values 10 and 11).&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
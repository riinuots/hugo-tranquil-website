<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>map on Riinu&#39;s scripting diary</title>
    <link>https://riinu.me/tags/map/</link>
    <description>Recent content in map on Riinu&#39;s scripting diary</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 25 Feb 2022 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://riinu.me/tags/map/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>World map using ggplot2 and an equal-area projection</title>
      <link>https://riinu.me/2022/02/world-map-ggplot2/</link>
      <pubDate>Fri, 25 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://riinu.me/2022/02/world-map-ggplot2/</guid>
      <description>
&lt;script src=&#34;https://riinu.me/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;There are of different ways to make maps in R, ad I always have to look this up and figure this out again from previous examples that I’ve used.
Today I had another look at what’s currently possible and what’s an easy way of making a world map in ggplot2 that doesn’t require fetching data from various places.&lt;/p&gt;
&lt;p&gt;TLDR: Copy this code to plot a world map using ggplot2:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(ggthemes)

world_map = map_data(&amp;quot;world&amp;quot;) %&amp;gt;% 
  filter(! long &amp;gt; 180)

countries = world_map %&amp;gt;% 
  distinct(region) %&amp;gt;% 
  rowid_to_column()

countries %&amp;gt;% 
  ggplot(aes(fill = rowid, map_id = region)) +
  geom_map(map = world_map) +
  expand_limits(x = world_map$long, y = world_map$lat) +
  theme_map() +
  coord_map(&amp;quot;moll&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://riinu.me/post/2022-02-25-world_map_ggplot2_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;2304&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;explanation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Explanation&lt;/h1&gt;
&lt;p&gt;To make a map using &lt;code&gt;geom_map()&lt;/code&gt; you’ll need two datasets: one that includes the map data (country borders), and another one on how to colour in each area.
I tried doing data = NULL or fill = “grey” to make all countries the same colour, but couldn’t get that to work.
So I’m creating the necessary dataset with just &lt;code&gt;distinct(world_map, region)&lt;/code&gt; which is essentially a list of every country in the map data.
The list of countries (=regions) is the first argument to &lt;code&gt;ggplot()&lt;/code&gt;, the &lt;code&gt;world_map&lt;/code&gt; data goes inside &lt;code&gt;geom_map()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

# Load map data
world_map = map_data(&amp;quot;world&amp;quot;)

distinct(world_map, region) %&amp;gt;% 
  ggplot(aes(map_id = region)) +
  geom_map(map = world_map) +
  expand_limits(x = world_map$long, y = world_map$lat)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://riinu.me/post/2022-02-25-world_map_ggplot2_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;expand_limits()&lt;/code&gt; here are essential as otherwise you will not see anything.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;equal-area-projection&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Equal area projection&lt;/h1&gt;
&lt;p&gt;Global maps that do not use an equal area projection are a huge pet peeve of mine.
The above map is not ‘equal-area’ and the closer to the equator an rea is the more diminished it is.&lt;/p&gt;
&lt;p&gt;Let’s just plot Greenland and Algeria for example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tibble(region = c(&amp;quot;Greenland&amp;quot;, &amp;quot;Algeria&amp;quot;)) %&amp;gt;% 
  ggplot(aes(map_id = region)) +
  geom_map(map = world_map) +
  expand_limits(x = world_map$long, y = world_map$lat)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://riinu.me/post/2022-02-25-world_map_ggplot2_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In reality, Algeria is bigger than Greenland (2.4 million km&lt;sup&gt;2&lt;/sup&gt; vs 2.2 million km&lt;sup&gt;2&lt;/sup&gt;)!&lt;/p&gt;
&lt;p&gt;Therefore, I always use an equal-area projection such as Mollweide:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

# Load map data
world_map = map_data(&amp;quot;world&amp;quot;)

distinct(world_map, region) %&amp;gt;% 
  ggplot(aes(map_id = region)) +
  geom_map(map = world_map) +
  expand_limits(x = world_map$long, y = world_map$lat) +
  coord_map(&amp;quot;moll&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://riinu.me/post/2022-02-25-world_map_ggplot2_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;But then we get those weird lines at the northern hemisphere. That’s because parts of the US and Russia extend across the 180th meridian. And since &lt;code&gt;geom_map()&lt;/code&gt; is connecting each area with itself it then draws these lines across the globe.&lt;/p&gt;
&lt;p&gt;A simple fixed I’ve found is to remove map data that has a longitude greater than 180 degrees:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(ggthemes)

world_map = map_data(&amp;quot;world&amp;quot;) %&amp;gt;% 
  filter(! long &amp;gt; 180)

countries = world_map %&amp;gt;% 
  distinct(region) %&amp;gt;% 
  rowid_to_column()

countries %&amp;gt;% 
  ggplot(aes(fill = rowid, map_id = region)) +
  geom_map(map = world_map) +
  expand_limits(x = world_map$long, y = world_map$lat) +
  coord_map(&amp;quot;moll&amp;quot;) +
  theme_map()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://riinu.me/post/2022-02-25-world_map_ggplot2_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I’ve also thrown in &lt;code&gt;theme_map()&lt;/code&gt; from &lt;code&gt;library(ggthemes)&lt;/code&gt; and put the coutry list which I made with &lt;code&gt;distinct()&lt;/code&gt; into a separate object.
This is useful as I’m generally plotting &lt;a href=&#34;https://en.wikipedia.org/wiki/Choropleth_map&#34;&gt;chloropleths&lt;/a&gt; so I want a tibble with values for each country that I can join with whichever data I have for each country (e.g., student numbers, population, etc.).&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tidyr on Riinu&#39;s scripting diary</title>
    <link>https://riinu.me/tags/tidyr/</link>
    <description>Recent content in tidyr on Riinu&#39;s scripting diary</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Jan 2022 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://riinu.me/tags/tidyr/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Reshaping multiple variables into tidy (long) data</title>
      <link>https://riinu.me/2022/01/r-filtering-with-na-values/</link>
      <pubDate>Fri, 28 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://riinu.me/2022/01/r-filtering-with-na-values/</guid>
      <description>
&lt;script src=&#34;https://riinu.me/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;There’s some explanation on what reshaping data in R means, why we do it, as well as the history, e.g., &lt;code&gt;melt()&lt;/code&gt; vs &lt;code&gt;gather()&lt;/code&gt; vs &lt;code&gt;pivot_longer()&lt;/code&gt; in a previous post: &lt;a href=&#34;https://www.riinu.me/2019/04/new-intuitive-ways-to-reshape-data-in-r/&#34;&gt;New intuitive ways for reshaping data in R&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That post shows how to reshape a single variable that had been recorded/entered across multiple different columns. But if multiple different variables are recorded over multiple different columns, then this is what you might want to do:&lt;/p&gt;
&lt;div id=&#34;example-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Example data&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# from dput():
widedata = structure(list(id = c(1, 2, 3, 4, 5, 6, 7, 8, 9),
                          time_1 = c(1, 1, 1, 1, 1, 1, 1, 1, 1),
                          time_2 = c(2, 2, 2, 2, 2, 2, 2, 2, 2), 
                          time_3 = c(3, 3, 3, 3, 3, 3, 3, 3, 3),
                          time_4 = c(4, 4, 4, 4, 4, 4, 4, 4, 4),
                          outcome_1 = c(1, 1, 1, 1, 1, 1, 1, 1, 1),
                          outcome_2 = c(2, 2, 2, 2, 2, 2, 2, 2, 2),
                          outcome_3 = c(3, 3, 3, 3, 3, 3, 3, 3, 3),
                          outcome_4 = c(4, 4, 4, 4, 4, 4, 4, 4, 4)),
                     row.names = c(NA, -9L), class = c(&amp;quot;tbl_df&amp;quot;, &amp;quot;tbl&amp;quot;, &amp;quot;data.frame&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is what it looks like:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://riinu.me/img/widedata.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;widedata in RStudio View&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;And this is what we want it to look like:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://riinu.me/img/longdata.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;widedata in RStudio View&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;simple-solution&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Simple solution&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

# pivot_longer puts everything that is not id into two columns (name and value)
# separate the variable names and stage numbers
# puts both variables back into two columns using pivot_wider()
longdata = widedata %&amp;gt;% 
  pivot_longer(-id) %&amp;gt;% 
  separate(name, into = c(&amp;quot;name&amp;quot;, &amp;quot;stage&amp;quot;), sep = &amp;quot;_&amp;quot;) %&amp;gt;% 
  pivot_wider(names_from = &amp;quot;name&amp;quot;, values_from = &amp;quot;value&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think this is a very good solution as it’s easy to understand and debug. See below for a step by step explanation of these lines.&lt;/p&gt;
&lt;p&gt;It is, however, possible to achieve the same result just by using clever arguments inside the &lt;code&gt;pivot_longer()&lt;/code&gt; (thank you Lisa for teaching me this):&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;clever-solution&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Clever solution&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# same result as above but just pivot_longer()
widedata %&amp;gt;% 
  pivot_longer(-id,
               names_to = c(&amp;quot;.value&amp;quot;, &amp;quot;number&amp;quot;),
               names_pattern = &amp;quot;(.+)_(.+)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 36 × 4
##       id number  time outcome
##    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
##  1     1 1          1       1
##  2     1 2          2       2
##  3     1 3          3       3
##  4     1 4          4       4
##  5     2 1          1       1
##  6     2 2          2       2
##  7     2 3          3       3
##  8     2 4          4       4
##  9     3 1          1       1
## 10     3 2          2       2
## # … with 26 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;simple-solution-step-by-step&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Simple solution step by step&lt;/h1&gt;
&lt;div id=&#34;combine-all-into-two-columns-first&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Combine all into two columns first&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pivot_longer(-id)&lt;/code&gt; combines all columns except &lt;code&gt;id&lt;/code&gt; into two columns (name and value):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;widedata %&amp;gt;% 
  pivot_longer(-id)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 72 × 3
##       id name      value
##    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;
##  1     1 time_1        1
##  2     1 time_2        2
##  3     1 time_3        3
##  4     1 time_4        4
##  5     1 outcome_1     1
##  6     1 outcome_2     2
##  7     1 outcome_3     3
##  8     1 outcome_4     4
##  9     2 time_1        1
## 10     2 time_2        2
## # … with 62 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The defaults &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; may be changed using these arguments:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;widedata %&amp;gt;% 
  pivot_longer(-id, names_to = &amp;quot;my_variables&amp;quot;, values_to = &amp;quot;my_values&amp;quot;) %&amp;gt;% slice(1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 × 3
##      id my_variables my_values
##   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;            &amp;lt;dbl&amp;gt;
## 1     1 time_1               1&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;using &lt;code&gt;%&amp;gt;% slice(1)&lt;/code&gt; for brevity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have multiple columns that you don’t want collected, then it’s easier to select the ones you want. In this example, it would look like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;widedata %&amp;gt;% 
  pivot_longer(matches(&amp;quot;time|outcome&amp;quot;)) %&amp;gt;% slice(1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 × 3
##      id name   value
##   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt;
## 1     1 time_1     1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example dataset, &lt;code&gt;matches(&#34;time|outcome&#34;)&lt;/code&gt; has the same effect as &lt;code&gt;-id&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Search for “tidyverse select helpers” to see the various options available for selecting the variables you need (&lt;a href=&#34;https://dplyr.tidyverse.org/reference/select.html&#34;&gt;select helpers reference&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;separate-column-names-and-numbers&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Separate column names and numbers&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;widedata %&amp;gt;% 
  pivot_longer(-id) %&amp;gt;% 
  separate(name, into = c(&amp;quot;name&amp;quot;, &amp;quot;stage&amp;quot;), sep = &amp;quot;_&amp;quot;) %&amp;gt;% slice(1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 × 4
##      id name  stage value
##   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
## 1     1 time  1         1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;pivot_wider-so-that-each-variable-has-its-own-column&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;pivot_wider() so that each variable has its own column&lt;/h2&gt;
&lt;p&gt;And the final step of this solution is &lt;code&gt;pivot_wider()&lt;/code&gt; which takes the multiple variables that &lt;code&gt;pivot_longer()&lt;/code&gt; combined into &lt;code&gt;name&lt;/code&gt; and puts them into their own columns:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;widedata %&amp;gt;% 
  pivot_longer(-id) %&amp;gt;% 
  separate(name, into = c(&amp;quot;name&amp;quot;, &amp;quot;stage&amp;quot;), sep = &amp;quot;_&amp;quot;) %&amp;gt;% 
  pivot_wider(names_from = &amp;quot;name&amp;quot;, values_from = &amp;quot;value&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 36 × 4
##       id stage  time outcome
##    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
##  1     1 1         1       1
##  2     1 2         2       2
##  3     1 3         3       3
##  4     1 4         4       4
##  5     2 1         1       1
##  6     2 2         2       2
##  7     2 3         3       3
##  8     2 4         4       4
##  9     3 1         1       1
## 10     3 2         2       2
## # … with 26 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;what-if-my-columns-dont-have-delimiters-e.g.-instead-of-time_1-time_2...-its-time1-time2-...&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;What if my columns don’t have delimiters (e.g., instead of &lt;code&gt;time_1, time_2,...&lt;/code&gt; it’s &lt;code&gt;time1, time2, ...&lt;/code&gt;)&lt;/h1&gt;
&lt;p&gt;In that case I would use &lt;code&gt;mutate()&lt;/code&gt; + &lt;code&gt;str_extract()&lt;/code&gt;/&lt;code&gt;str_remove()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;widedata %&amp;gt;% 
  pivot_longer(-id) %&amp;gt;% 
  mutate(stage    = str_extract(name, &amp;quot;[:digit:]&amp;quot;)) %&amp;gt;% 
  mutate(variable = str_remove(name, &amp;quot;_[:digit:]&amp;quot;)) %&amp;gt;% 
  pivot_wider(names_from = &amp;quot;name&amp;quot;, values_from = &amp;quot;value&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first mutate extracts the number (&lt;code&gt;&#34;[:digit:]&#34;&lt;/code&gt;) from the column called &lt;code&gt;name&lt;/code&gt; (which is the result of &lt;code&gt;pivot_longer()&lt;/code&gt;), I’ve called the new variable that gets this number &lt;code&gt;stage&lt;/code&gt; but you can call it anything. We then remove the number from &lt;code&gt;name&lt;/code&gt; as it now lives in a column of its own.&lt;/p&gt;
&lt;p&gt;This extraction is actually what the &lt;code&gt;tidyr::extract()&lt;/code&gt; function is for, but it always takes me much longer to get &lt;code&gt;extract()&lt;/code&gt; to work as compared to the easy to manage &lt;code&gt;mutate()&lt;/code&gt; + &lt;code&gt;str_extract()&lt;/code&gt;/&lt;code&gt;str_remove()&lt;/code&gt; combo above.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;final-words&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Final words&lt;/h1&gt;
&lt;p&gt;Reshaping data is really tricky, and your spreadsheet from hell is likely much more complicated than the simple example here. It always takes me lots of trial and error to get these things to work properly. Especially if there are irregularities in the data. You may find &lt;code&gt;janitor::clean_names()&lt;/code&gt; useful, or you may need to do more cleanup using various &lt;code&gt;str_()&lt;/code&gt; functions from the &lt;a href=&#34;https://stringr.tidyverse.org&#34;&gt;stringr package&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Good luck!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>New intuitive ways for reshaping data in R: long live pivot_longer() and pivot_wider()</title>
      <link>https://riinu.me/2019/04/new-intuitive-ways-to-reshape-data-in-r/</link>
      <pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://riinu.me/2019/04/new-intuitive-ways-to-reshape-data-in-r/</guid>
      <description>


&lt;p&gt;TLDR: there are two new and very intuitive R functions for reshaping data: see &lt;a href=&#34;#examples&#34;&gt;Examples&lt;/a&gt; of &lt;code&gt;pivot_longer()&lt;/code&gt; and &lt;code&gt;pivot_wider()&lt;/code&gt; below. At the time of writing, these new functions are extremely fresh and only exist in the development version on GitHub (see &lt;a href=&#34;#installation&#34;&gt;Installation&lt;/a&gt;), we should probably wait for the tidyverse team to officially release them (in CRAN) before putting them into day-to-day use.&lt;/p&gt;
&lt;p&gt;Exciting!&lt;/p&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;The juxtapose of &lt;em&gt;data collection&lt;/em&gt; vs &lt;em&gt;data analysis&lt;/em&gt;: data that was very easy to collect, is probably very hard to analyse, and vice versa. For example, if data is collected/written down whichever format was most convenient at the time of data collection, it is probably not recorded in a regularly shaped table, with various bits of information in different parts of the document. And even if data is collected into a table, it is often intuitive (for data entry) to include information about the same variable in different columns. For example, look at this example data I just made up:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

candydata_raw = read_csv(&amp;quot;2019-04-07_candy_preference_data.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;candy_type&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;likes age: 5&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;likes age: 10&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;likes age: 15&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;gets age: 5&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;gets age: 10&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;gets age: 15&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For each candy type, there are 8 columns with values. But actually, these 8 columns capture a combination of 3 variables: &lt;code&gt;age&lt;/code&gt;, &lt;code&gt;likes&lt;/code&gt; and &lt;code&gt;eats&lt;/code&gt;. This is known as the wide format, and it is a convenient way to either note down or even present values. It is human-readable. For effective data analysis, however, we need data to be in the tidy data format, where each column is a single variable, and each row a single observation (&lt;a href=&#34;https://www.jstatsoft.org/article/view/v059i10&#34; class=&#34;uri&#34;&gt;https://www.jstatsoft.org/article/view/v059i10&lt;/a&gt;). It needs to be less human-readable and more computer-friendly.&lt;/p&gt;
&lt;p&gt;Some of you may remember now retired &lt;code&gt;reshape2::melt()&lt;/code&gt; or &lt;code&gt;reshape2::dcast()&lt;/code&gt;, and many of you (inclduing myself!) have struggled remebering the arguments for &lt;code&gt;tidyr::gather()&lt;/code&gt; and &lt;code&gt;tidyr::spread()&lt;/code&gt;. Based on extensive community feedback, the tidyverse team have reinveted these functions using both more intuitive names, as well as clearer syntax (arguments):&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Thanks to all 2649 (!!!) people who completed my survey about table shapes! I&amp;#39;ve done analysed the data at &lt;a href=&#34;https://t.co/hyu1o91xRm&#34;&gt;https://t.co/hyu1o91xRm&lt;/a&gt; and the new functions will be called pivot_longer() and pivot_wider() &lt;a href=&#34;https://twitter.com/hashtag/rstats?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#rstats&lt;/a&gt;&lt;/p&gt;&amp;mdash; Hadley Wickham (@hadleywickham) &lt;a href=&#34;https://twitter.com/hadleywickham/status/1109816130774986753?ref_src=twsrc%5Etfw&#34;&gt;March 24, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;/div&gt;
&lt;div id=&#34;installation20190407&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Installation&lt;/h1&gt;
&lt;p&gt;These functions were added just a month ago, so these functions are not yet included in the standard version of &lt;code&gt;tidyr&lt;/code&gt; that comes with &lt;code&gt;install.packages(&#34;tidyverse&#34;)&lt;/code&gt; or even &lt;code&gt;update.packages()&lt;/code&gt; (the current version of &lt;code&gt;tidyr&lt;/code&gt; on CRAN is 0.8.3). To play with the bleeding edge versions of R packages, run &lt;code&gt;install.packages(&#34;devtools&#34;)&lt;/code&gt; and then &lt;code&gt;devtools::install_github(&#34;tidyverse/tidyr&#34;)&lt;/code&gt;. If you are a Mac user and it asks you “Do you want to install from sources the package which needs compilation?”, say Yes.&lt;/p&gt;
&lt;p&gt;You might need to Restart R (Session menu at the top) and load &lt;code&gt;library(tidyverse)&lt;/code&gt; again. You can check whether you now have these functions installed by typing in &lt;code&gt;pivot_longer&lt;/code&gt; and pressing F1 - if a relevant Help tab pops open you got it.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;examples20190407&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Examples&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;candydata_longer = candydata_raw %&amp;gt;% 
  pivot_longer(contains(&amp;quot;age&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;candy_type&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;name&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;likes age: 5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;likes age: 10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;likes age: 15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;gets age: 5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;gets age: 10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;gets age: 15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;likes age: 5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;likes age: 10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;likes age: 15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;gets age: 5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;gets age: 10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;gets age: 15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Now, that’s already a lot better, but we still need to split the &lt;code&gt;name&lt;/code&gt; column into the two different variables it really includes. “name” is what &lt;code&gt;pivot_longer()&lt;/code&gt; calls this new column by default. Remember, each column is a single variable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;candydata_longer = candydata_raw %&amp;gt;% 
  pivot_longer(contains(&amp;quot;age&amp;quot;)) %&amp;gt;% 
  separate(name, into = c(&amp;quot;questions&amp;quot;, NA, &amp;quot;age&amp;quot;), convert = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;candy_type&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;questions&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;age&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;likes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;likes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;likes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;gets&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;gets&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;gets&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;likes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;likes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;likes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;gets&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;gets&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;gets&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;And &lt;code&gt;pivot_wider()&lt;/code&gt; can be used to do the reverse:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;candydata = candydata_longer %&amp;gt;% 
  pivot_wider(names_from = questions, values_from = value)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;candy_type&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;age&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;likes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;gets&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;It is important to spell out the arguments here (&lt;code&gt;names_from =&lt;/code&gt;, &lt;code&gt;values_frame =&lt;/code&gt;) since they are not the second and third arguments of &lt;code&gt;pivot_wider()&lt;/code&gt; (like they were in &lt;code&gt;spread()&lt;/code&gt;). Investigate the &lt;code&gt;pivot_wider+F1&lt;/code&gt; Help tab for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;wrap-up-and-notes&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Wrap-up and notes&lt;/h1&gt;
&lt;p&gt;Now these are datasets we can work with: each column is a variable, each row is an observation.&lt;/p&gt;
&lt;p&gt;Do not start replacing working and tested instances of &lt;code&gt;gather()&lt;/code&gt; or &lt;code&gt;spread()&lt;/code&gt; in your existing R code with these new functions. That is neither efficient nor necessary - &lt;code&gt;gather()&lt;/code&gt; and &lt;code&gt;spread()&lt;/code&gt; will remain in &lt;code&gt;tidyr&lt;/code&gt; to make sure people’s scripts don’t suddenly stop working. Meaning: &lt;code&gt;tidyr&lt;/code&gt; is backward compatible. But after these functions are officially released, I will start using them in all new scripts I write.&lt;/p&gt;
&lt;p&gt;I made the original messy columns still relatively nice to work with - no typos and reasonable delimiters. Usually, the labels are much worse and need the help of &lt;code&gt;janitor::clean_names()&lt;/code&gt;, &lt;code&gt;stringr::str_replace()&lt;/code&gt;, and multiple iterations of &lt;code&gt;tidyr::separate()&lt;/code&gt; to arrive at a nice tidy tibble/data frame.&lt;/p&gt;
&lt;div id=&#34;tidyrseparate-tips&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;tidyr::separate() tips:&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;into = c(&#34;var1&#34;, NA, &#34;var2&#34;)&lt;/code&gt; - now this is an amazing trick I only came across this week! This is a convenient way to drop useless (new) columns. Previously, I would have achieved the same result with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;... %&amp;gt;% 
    separate(..., into = c(&amp;quot;var1&amp;quot;, &amp;quot;drop&amp;quot;, &amp;quot;var2&amp;quot;)) %&amp;gt;% 
    select(-drop) %&amp;gt;% 
    ...
    &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;convert = TRUE&lt;/code&gt;: by default, &lt;code&gt;separate()&lt;/code&gt; creates new variables that are also just “characters”. This means our age would have been a chacter vector of, e.g., “5”, “10”, rather than 5, 10, and R wouldn’t have known how to do arithmetic on it. In this example, &lt;code&gt;convert = TRUE&lt;/code&gt; is equivalent to &lt;code&gt;mutate(age = as.numeric(age))&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Good luck!&lt;/p&gt;
&lt;p&gt;P.S. This is one of the coolest Tweets I’ve ever seen:&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;On this auspicious day, in honor of tidyr, I am pleased to re-introduce you to pivot_longer and pivot_wider. &lt;a href=&#34;https://twitter.com/hashtag/rstats?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#rstats&lt;/a&gt; &lt;a href=&#34;https://t.co/hj3zqYYbVf&#34;&gt;pic.twitter.com/hj3zqYYbVf&lt;/a&gt;&lt;/p&gt;&amp;mdash; Ian Lyttle (@ijlyttle) &lt;a href=&#34;https://twitter.com/ijlyttle/status/1112675046663876608?ref_src=twsrc%5Etfw&#34;&gt;April 1, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>reshaping data on Riinu&#39;s scripting diary</title>
    <link>https://riinu.me/tags/reshaping-data/</link>
    <description>Recent content in reshaping data on Riinu&#39;s scripting diary</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Jan 2022 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://riinu.me/tags/reshaping-data/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Reshaping multiple variables into tidy data (wide to long)</title>
      <link>https://riinu.me/2022/01/wide-to-long-multiple/</link>
      <pubDate>Fri, 28 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://riinu.me/2022/01/wide-to-long-multiple/</guid>
      <description>
&lt;script src=&#34;https://riinu.me/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;There’s some explanation on what reshaping data in R means, why we do it, as well as the history, e.g., &lt;code&gt;melt()&lt;/code&gt; vs &lt;code&gt;gather()&lt;/code&gt; vs &lt;code&gt;pivot_longer()&lt;/code&gt; in a previous post: &lt;a href=&#34;https://www.riinu.me/2019/04/new-intuitive-ways-to-reshape-data-in-r/&#34;&gt;New intuitive ways for reshaping data in R&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That post shows how to reshape a single variable that had been recorded/entered across multiple different columns. But if multiple different variables are recorded over multiple different columns, then this is what you might want to do:&lt;/p&gt;
&lt;div id=&#34;example-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Example data&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# from dput():
widedata = structure(list(id = c(1, 2, 3, 4, 5, 6, 7, 8, 9),
                          time_1 = c(1, 1, 1, 1, 1, 1, 1, 1, 1),
                          time_2 = c(2, 2, 2, 2, 2, 2, 2, 2, 2), 
                          time_3 = c(3, 3, 3, 3, 3, 3, 3, 3, 3),
                          time_4 = c(4, 4, 4, 4, 4, 4, 4, 4, 4),
                          outcome_1 = c(1, 1, 1, 1, 1, 1, 1, 1, 1),
                          outcome_2 = c(2, 2, 2, 2, 2, 2, 2, 2, 2),
                          outcome_3 = c(3, 3, 3, 3, 3, 3, 3, 3, 3),
                          outcome_4 = c(4, 4, 4, 4, 4, 4, 4, 4, 4)),
                     row.names = c(NA, -9L), class = c(&amp;quot;tbl_df&amp;quot;, &amp;quot;tbl&amp;quot;, &amp;quot;data.frame&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is what it looks like:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://riinu.me/img/widedata.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;wide data in RStudio View&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;And this is what we want it to look like:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://riinu.me/img/longdata.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;long data in RStudio View&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;simple-solution&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Simple solution&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

# pivot_longer puts everything that is not id into two columns (name and value)
# separate the variable names and stage numbers
# puts both variables back into two columns using pivot_wider()
longdata = widedata %&amp;gt;% 
  pivot_longer(-id) %&amp;gt;% 
  separate(name, into = c(&amp;quot;name&amp;quot;, &amp;quot;stage&amp;quot;), sep = &amp;quot;_&amp;quot;) %&amp;gt;% 
  pivot_wider(names_from = &amp;quot;name&amp;quot;, values_from = &amp;quot;value&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think this is a very good solution as it’s easy to understand and debug. See below for a step by step explanation of these lines.&lt;/p&gt;
&lt;p&gt;It is, however, possible to achieve the same result just by using clever arguments inside the &lt;code&gt;pivot_longer()&lt;/code&gt; (thank you Lisa for teaching me this):&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;clever-solution&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Clever solution&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# same result as above but just pivot_longer()
widedata %&amp;gt;% 
  pivot_longer(-id,
               names_to = c(&amp;quot;.value&amp;quot;, &amp;quot;number&amp;quot;),
               names_pattern = &amp;quot;(.+)_(.+)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 36 × 4
##       id number  time outcome
##    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
##  1     1 1          1       1
##  2     1 2          2       2
##  3     1 3          3       3
##  4     1 4          4       4
##  5     2 1          1       1
##  6     2 2          2       2
##  7     2 3          3       3
##  8     2 4          4       4
##  9     3 1          1       1
## 10     3 2          2       2
## # … with 26 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;simple-solution-step-by-step&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Simple solution step by step&lt;/h1&gt;
&lt;div id=&#34;combine-all-into-two-columns-first&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Combine all into two columns first&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pivot_longer(-id)&lt;/code&gt; combines all columns except &lt;code&gt;id&lt;/code&gt; into two columns (name and value):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;widedata %&amp;gt;% 
  pivot_longer(-id)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 72 × 3
##       id name      value
##    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;
##  1     1 time_1        1
##  2     1 time_2        2
##  3     1 time_3        3
##  4     1 time_4        4
##  5     1 outcome_1     1
##  6     1 outcome_2     2
##  7     1 outcome_3     3
##  8     1 outcome_4     4
##  9     2 time_1        1
## 10     2 time_2        2
## # … with 62 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The defaults &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; may be changed using these arguments:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;widedata %&amp;gt;% 
  pivot_longer(-id, names_to = &amp;quot;my_variables&amp;quot;, values_to = &amp;quot;my_values&amp;quot;) %&amp;gt;% slice(1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 × 3
##      id my_variables my_values
##   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;            &amp;lt;dbl&amp;gt;
## 1     1 time_1               1&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;using &lt;code&gt;%&amp;gt;% slice(1)&lt;/code&gt; for brevity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have multiple columns that you don’t want collected, then it’s easier to select the ones you want. In this example, it would look like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;widedata %&amp;gt;% 
  pivot_longer(matches(&amp;quot;time|outcome&amp;quot;)) %&amp;gt;% slice(1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 × 3
##      id name   value
##   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt;
## 1     1 time_1     1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example dataset, &lt;code&gt;matches(&#34;time|outcome&#34;)&lt;/code&gt; has the same effect as &lt;code&gt;-id&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Search for “tidyverse select helpers” to see the various options available for selecting the variables you need (&lt;a href=&#34;https://dplyr.tidyverse.org/reference/select.html&#34;&gt;select helpers reference&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;separate-column-names-and-numbers&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Separate column names and numbers&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;widedata %&amp;gt;% 
  pivot_longer(-id) %&amp;gt;% 
  separate(name, into = c(&amp;quot;name&amp;quot;, &amp;quot;stage&amp;quot;), sep = &amp;quot;_&amp;quot;) %&amp;gt;% slice(1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 × 4
##      id name  stage value
##   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
## 1     1 time  1         1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;pivot_wider-so-that-each-variable-has-its-own-column&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;pivot_wider() so that each variable has its own column&lt;/h2&gt;
&lt;p&gt;And the final step of this solution is &lt;code&gt;pivot_wider()&lt;/code&gt; which takes the multiple variables that &lt;code&gt;pivot_longer()&lt;/code&gt; combined into &lt;code&gt;name&lt;/code&gt; and puts them into their own columns:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;widedata %&amp;gt;% 
  pivot_longer(-id) %&amp;gt;% 
  separate(name, into = c(&amp;quot;name&amp;quot;, &amp;quot;stage&amp;quot;), sep = &amp;quot;_&amp;quot;) %&amp;gt;% 
  pivot_wider(names_from = &amp;quot;name&amp;quot;, values_from = &amp;quot;value&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 36 × 4
##       id stage  time outcome
##    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
##  1     1 1         1       1
##  2     1 2         2       2
##  3     1 3         3       3
##  4     1 4         4       4
##  5     2 1         1       1
##  6     2 2         2       2
##  7     2 3         3       3
##  8     2 4         4       4
##  9     3 1         1       1
## 10     3 2         2       2
## # … with 26 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;what-if-my-columns-dont-have-delimiters-e.g.-instead-of-time_1-time_2...-its-time1-time2-...&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;What if my columns don’t have delimiters (e.g., instead of &lt;code&gt;time_1, time_2,...&lt;/code&gt; it’s &lt;code&gt;time1, time2, ...&lt;/code&gt;)&lt;/h1&gt;
&lt;p&gt;In that case I would use &lt;code&gt;mutate()&lt;/code&gt; + &lt;code&gt;str_extract()&lt;/code&gt;/&lt;code&gt;str_remove()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;widedata %&amp;gt;% 
  pivot_longer(-id) %&amp;gt;% 
  mutate(stage    = str_extract(name, &amp;quot;[:digit:]&amp;quot;)) %&amp;gt;% 
  mutate(variable = str_remove(name, &amp;quot;_[:digit:]&amp;quot;)) %&amp;gt;% 
  pivot_wider(names_from = &amp;quot;name&amp;quot;, values_from = &amp;quot;value&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first mutate extracts the number (&lt;code&gt;&#34;[:digit:]&#34;&lt;/code&gt;) from the column called &lt;code&gt;name&lt;/code&gt; (which is the result of &lt;code&gt;pivot_longer()&lt;/code&gt;), I’ve called the new variable that gets this number &lt;code&gt;stage&lt;/code&gt; but you can call it anything. We then remove the number from &lt;code&gt;name&lt;/code&gt; as it now lives in a column of its own.&lt;/p&gt;
&lt;p&gt;This extraction is actually what the &lt;code&gt;tidyr::extract()&lt;/code&gt; function is for, but it always takes me much longer to get &lt;code&gt;extract()&lt;/code&gt; to work as compared to the easy to manage &lt;code&gt;mutate()&lt;/code&gt; + &lt;code&gt;str_extract()&lt;/code&gt;/&lt;code&gt;str_remove()&lt;/code&gt; combo above.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;final-words&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Final words&lt;/h1&gt;
&lt;p&gt;Reshaping data is really tricky, and your spreadsheet from hell is likely much more complicated than the simple example here. It always takes me lots of trial and error to get these things to work properly. Especially if there are irregularities in the data. You may find &lt;code&gt;janitor::clean_names()&lt;/code&gt; useful, or you may need to do more cleanup using various &lt;code&gt;str_()&lt;/code&gt; functions from the &lt;a href=&#34;https://stringr.tidyverse.org&#34;&gt;stringr package&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Good luck!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
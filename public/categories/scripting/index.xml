<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>scripting on Riinu&#39;s scripting diary</title>
    <link>https://riinu.me/categories/scripting/</link>
    <description>Recent content in scripting on Riinu&#39;s scripting diary</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Jan 2022 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://riinu.me/categories/scripting/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Reshaping multiple variables into tidy (long) data</title>
      <link>https://riinu.me/2022/01/r-filtering-with-na-values/</link>
      <pubDate>Fri, 28 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://riinu.me/2022/01/r-filtering-with-na-values/</guid>
      <description>
&lt;script src=&#34;https://riinu.me/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;There’s some explanation on what reshaping data in R means, why we do it, as well as the history, e.g., &lt;code&gt;melt()&lt;/code&gt; vs &lt;code&gt;gather()&lt;/code&gt; vs &lt;code&gt;pivot_longer()&lt;/code&gt; in a previous post: &lt;a href=&#34;https://www.riinu.me/2019/04/new-intuitive-ways-to-reshape-data-in-r/&#34;&gt;New intuitive ways for reshaping data in R&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That post shows how to reshape a single variable that had been recorded/entered across multiple different columns. But if multiple different variables are recorded over multiple different columns, then this is what you might want to do:&lt;/p&gt;
&lt;div id=&#34;example-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Example data&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# from dput():
widedata = structure(list(id = c(1, 2, 3, 4, 5, 6, 7, 8, 9),
                          time_1 = c(1, 1, 1, 1, 1, 1, 1, 1, 1),
                          time_2 = c(2, 2, 2, 2, 2, 2, 2, 2, 2), 
                          time_3 = c(3, 3, 3, 3, 3, 3, 3, 3, 3),
                          time_4 = c(4, 4, 4, 4, 4, 4, 4, 4, 4),
                          outcome_1 = c(1, 1, 1, 1, 1, 1, 1, 1, 1),
                          outcome_2 = c(2, 2, 2, 2, 2, 2, 2, 2, 2),
                          outcome_3 = c(3, 3, 3, 3, 3, 3, 3, 3, 3),
                          outcome_4 = c(4, 4, 4, 4, 4, 4, 4, 4, 4)),
                     row.names = c(NA, -9L), class = c(&amp;quot;tbl_df&amp;quot;, &amp;quot;tbl&amp;quot;, &amp;quot;data.frame&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is what it looks like:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://riinu.me/img/widedata.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;widedata in RStudio View&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;And this is what we want it to look like:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://riinu.me/img/longdata.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;widedata in RStudio View&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;simple-solution&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Simple solution&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

# pivot_longer puts everything that is not id into two columns (name and value)
# separate the variable names and stage numbers
# puts both variables back into two columns using pivot_wider()
longdata = widedata %&amp;gt;% 
  pivot_longer(-id) %&amp;gt;% 
  separate(name, into = c(&amp;quot;name&amp;quot;, &amp;quot;stage&amp;quot;), sep = &amp;quot;_&amp;quot;) %&amp;gt;% 
  pivot_wider(names_from = &amp;quot;name&amp;quot;, values_from = &amp;quot;value&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think this is a very good solution as it’s easy to understand and debug. See below for a step by step explanation of these lines.&lt;/p&gt;
&lt;p&gt;It is, however, possible to achieve the same result just by using clever arguments inside the &lt;code&gt;pivot_longer()&lt;/code&gt; (thank you Lisa for teaching me this):&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;clever-solution&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Clever solution&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# same result as above but just pivot_longer()
widedata %&amp;gt;% 
  pivot_longer(-id,
               names_to = c(&amp;quot;.value&amp;quot;, &amp;quot;number&amp;quot;),
               names_pattern = &amp;quot;(.+)_(.+)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 36 × 4
##       id number  time outcome
##    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
##  1     1 1          1       1
##  2     1 2          2       2
##  3     1 3          3       3
##  4     1 4          4       4
##  5     2 1          1       1
##  6     2 2          2       2
##  7     2 3          3       3
##  8     2 4          4       4
##  9     3 1          1       1
## 10     3 2          2       2
## # … with 26 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;simple-solution-step-by-step&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Simple solution step by step&lt;/h1&gt;
&lt;div id=&#34;combine-all-into-two-columns-first&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Combine all into two columns first&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pivot_longer(-id)&lt;/code&gt; combines all columns except &lt;code&gt;id&lt;/code&gt; into two columns (name and value):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;widedata %&amp;gt;% 
  pivot_longer(-id)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 72 × 3
##       id name      value
##    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;
##  1     1 time_1        1
##  2     1 time_2        2
##  3     1 time_3        3
##  4     1 time_4        4
##  5     1 outcome_1     1
##  6     1 outcome_2     2
##  7     1 outcome_3     3
##  8     1 outcome_4     4
##  9     2 time_1        1
## 10     2 time_2        2
## # … with 62 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The defaults &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; may be changed using these arguments:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;widedata %&amp;gt;% 
  pivot_longer(-id, names_to = &amp;quot;my_variables&amp;quot;, values_to = &amp;quot;my_values&amp;quot;) %&amp;gt;% slice(1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 × 3
##      id my_variables my_values
##   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;            &amp;lt;dbl&amp;gt;
## 1     1 time_1               1&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;using &lt;code&gt;%&amp;gt;% slice(1)&lt;/code&gt; for brevity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have multiple columns that you don’t want collected, then it’s easier to select the ones you want. In this example, it would look like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;widedata %&amp;gt;% 
  pivot_longer(matches(&amp;quot;time|outcome&amp;quot;)) %&amp;gt;% slice(1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 × 3
##      id name   value
##   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt;
## 1     1 time_1     1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example dataset, &lt;code&gt;matches(&#34;time|outcome&#34;)&lt;/code&gt; has the same effect as &lt;code&gt;-id&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Search for “tidyverse select helpers” to see the various options available for selecting the variables you need (&lt;a href=&#34;https://dplyr.tidyverse.org/reference/select.html&#34;&gt;select helpers reference&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;separate-column-names-and-numbers&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Separate column names and numbers&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;widedata %&amp;gt;% 
  pivot_longer(-id) %&amp;gt;% 
  separate(name, into = c(&amp;quot;name&amp;quot;, &amp;quot;stage&amp;quot;), sep = &amp;quot;_&amp;quot;) %&amp;gt;% slice(1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 × 4
##      id name  stage value
##   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
## 1     1 time  1         1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;pivot_wider-so-that-each-variable-has-its-own-column&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;pivot_wider() so that each variable has its own column&lt;/h2&gt;
&lt;p&gt;And the final step of this solution is &lt;code&gt;pivot_wider()&lt;/code&gt; which takes the multiple variables that &lt;code&gt;pivot_longer()&lt;/code&gt; combined into &lt;code&gt;name&lt;/code&gt; and puts them into their own columns:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;widedata %&amp;gt;% 
  pivot_longer(-id) %&amp;gt;% 
  separate(name, into = c(&amp;quot;name&amp;quot;, &amp;quot;stage&amp;quot;), sep = &amp;quot;_&amp;quot;) %&amp;gt;% 
  pivot_wider(names_from = &amp;quot;name&amp;quot;, values_from = &amp;quot;value&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 36 × 4
##       id stage  time outcome
##    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
##  1     1 1         1       1
##  2     1 2         2       2
##  3     1 3         3       3
##  4     1 4         4       4
##  5     2 1         1       1
##  6     2 2         2       2
##  7     2 3         3       3
##  8     2 4         4       4
##  9     3 1         1       1
## 10     3 2         2       2
## # … with 26 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;what-if-my-columns-dont-have-delimiters-e.g.-instead-of-time_1-time_2...-its-time1-time2-...&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;What if my columns don’t have delimiters (e.g., instead of &lt;code&gt;time_1, time_2,...&lt;/code&gt; it’s &lt;code&gt;time1, time2, ...&lt;/code&gt;)&lt;/h1&gt;
&lt;p&gt;In that case I would use &lt;code&gt;mutate()&lt;/code&gt; + &lt;code&gt;str_extract()&lt;/code&gt;/&lt;code&gt;str_remove()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;widedata %&amp;gt;% 
  pivot_longer(-id) %&amp;gt;% 
  mutate(stage    = str_extract(name, &amp;quot;[:digit:]&amp;quot;)) %&amp;gt;% 
  mutate(variable = str_remove(name, &amp;quot;_[:digit:]&amp;quot;)) %&amp;gt;% 
  pivot_wider(names_from = &amp;quot;name&amp;quot;, values_from = &amp;quot;value&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first mutate extracts the number (&lt;code&gt;&#34;[:digit:]&#34;&lt;/code&gt;) from the column called &lt;code&gt;name&lt;/code&gt; (which is the result of &lt;code&gt;pivot_longer()&lt;/code&gt;), I’ve called the new variable that gets this number &lt;code&gt;stage&lt;/code&gt; but you can call it anything. We then remove the number from &lt;code&gt;name&lt;/code&gt; as it now lives in a column of its own.&lt;/p&gt;
&lt;p&gt;This extraction is actually what the &lt;code&gt;tidyr::extract()&lt;/code&gt; function is for, but it always takes me much longer to get &lt;code&gt;extract()&lt;/code&gt; to work as compared to the easy to manage &lt;code&gt;mutate()&lt;/code&gt; + &lt;code&gt;str_extract()&lt;/code&gt;/&lt;code&gt;str_remove()&lt;/code&gt; combo above.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;final-words&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Final words&lt;/h1&gt;
&lt;p&gt;Reshaping data is really tricky, and your spreadsheet from hell is likely much more complicated than the simple example here. It always takes me lots of trial and error to get these things to work properly. Especially if there are irregularities in the data. You may find &lt;code&gt;janitor::clean_names()&lt;/code&gt; useful, or you may need to do more cleanup using various &lt;code&gt;str_()&lt;/code&gt; functions from the &lt;a href=&#34;https://stringr.tidyverse.org&#34;&gt;stringr package&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Good luck!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>RStudio Server LAN party: Laptop&#43;Router&#43;Docker to serve RStudio offline</title>
      <link>https://riinu.me/2019/11/rstudio-server-lan-party/</link>
      <pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://riinu.me/2019/11/rstudio-server-lan-party/</guid>
      <description>


&lt;blockquote&gt;
&lt;p&gt;TLDR: You can teach R on people’s own laptops without having them install anything or require an internet connection.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://riinu.me/img/healthyr_bus.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Members of the Surgical Informatics team in Ghana, 2019. More information: surgicalinformatics.org&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Running R programming courses on people’s own laptops is a pain, especially as we use a lot of very useful extensions that actually make learning and using R much easier and more fun. But long installation instructions can be very off-putting for complete beginners, and &lt;strong&gt;people can be discouraged to learn programming if installation hurdles invoke their imposter syndrome&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We almost always run our courses in places with a good internet connection (it does not have to be super fast or flawless), so we get our students all set up on RStudio Server (hosted by us) or &lt;a href=&#34;https://rstudio.cloud&#34; class=&#34;uri&#34;&gt;https://rstudio.cloud&lt;/a&gt; (a free service provided by RStudio!).
You connect to either of these options using a web browser, and even very old computers can handle this. That’s because the actual computations happen on the server and not on the student’s computer. So the computer just serves as a window to the training instance used.&lt;/p&gt;
&lt;p&gt;Now, these options work really well as long as you have a stable internet connection. But for teaching R offline and on people’s own laptops, you either have to:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: lower-alpha&#34;&gt;
&lt;li&gt;make sure everyone installs everything correctly before they attend the course&lt;/li&gt;
&lt;li&gt;Download all the software and extensions, put them on USB sticks and try to install them together at the start&lt;/li&gt;
&lt;li&gt;start serving RStudio from a your computer using Local Area Network (LAN) created by a router&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, we already discussed why the first option is problematic (gatekeeper for complete beginners). The second option - installing everything at the start together - means that you start the course with the most boring part. &lt;strong&gt;And since everyone’s computers are different&lt;/strong&gt; (both by operating systems as well as different versions of the operating systems), &lt;strong&gt;this can take quite a while to sort&lt;/strong&gt;. Therefore, queue in option c) - an RStudio Server LAN party.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;requirements&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;A computer with more than 4GB of RAM.&lt;/strong&gt; macOS alone uses around 2-3GB just to keep going, and running the RStudio Server docker container was using another 3-4 GB, so you’ll definitely need more than 4GB in total.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A network router.&lt;/strong&gt; For a small number of participants, the same one you already have at home will work. Had to specify “network” here, as apparently, even my Google search for “router” suggests the power tool before network routers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker - free software&lt;/strong&gt;, dead easy to install on macOS (search the internet for “download Docker”). Looks like installation on the Windows Home operating system might be trickier. If you are a Windows Home user who is using Docker, please do post a link to your favourite instructions in the comments below.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Internet connection for setting up&lt;/strong&gt; - to download RStudio’s docker image and install your extra packages.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://riinu.me/img/docker_lan.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;My MacBook Pro serving RStudio to 10 other computers in Ghana, November 2019.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;set-up&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Set-up&lt;/h2&gt;
&lt;p&gt;Running RStudio using Docker is so simple you won’t believe me. It honestly is just a single-liner to be entered into your Terminal (Command Prompt on Windows):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -d -p 8787:8787 -e ROOT=TRUE -e USER=user -e PASSWORD=password rstudio/verse &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will automatically download a Docker image put together by RStudio. The one called &lt;code&gt;verse&lt;/code&gt; includes all the tidyverse packages as well as publishing-related ones (R Markdown, Shiny, etc.). You can find a list of the difference ones here: &lt;a href=&#34;https://github.com/rocker-org/rocker&#34; class=&#34;uri&#34;&gt;https://github.com/rocker-org/rocker&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then open a browser and go to &lt;code&gt;localhost:8787&lt;/code&gt; and you should be greeted with an RStudio Server login! (Localhost only works on a Mac or Linux, if using Windows, take a note of your IP address and use that instead of &lt;code&gt;localhost&lt;/code&gt;.) More information and instructions can be found here: &lt;a href=&#34;https://github.com/rocker-org/rocker/wiki/Using-the-RStudio-image&#34; class=&#34;uri&#34;&gt;https://github.com/rocker-org/rocker/wiki/Using-the-RStudio-image&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tip: RStudio suggests port 8787, which is what I used for consistency, but if you set it up on 80 you can omit the :80 as that’s the default anyway. So you can just go to &lt;code&gt;localhost&lt;/code&gt; (or something like &lt;code&gt;127.0.0.0&lt;/code&gt; if using Windows).&lt;/p&gt;
&lt;p&gt;For those of you who have never seen or used RStudio Server, this is what it looks like:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://riinu.me/img/rstudio_server.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Rstudio Server is almost identical to RStudio Desktop. Main difference is the “Upload” button in the Files pane. This one is running in a Docker container, served at port 8787, and accessed using Safari (but any web browser will work).&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The Docker single-liner above will create a single user with sudo rights (since I’ve included &lt;code&gt;-e ROOT=TRUE&lt;/code&gt;). After logging into the instance, you can then add other users and copy the course materials to everyone using these scripts: &lt;a href=&#34;https://github.com/einarpius/create_rstudio_users&#34; class=&#34;uri&#34;&gt;https://github.com/einarpius/create_rstudio_users&lt;/a&gt; Note that the instance is running Debian, so you’ll need very basic familiarity with managing file permissions on the command line. For example, you’ll need to make the scripts executable with &lt;code&gt;chmod 700 create_users.sh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then connect to the same router you’ll be using for your LAN party, go to router settings and assign yourself a fixed IP address, e.g., 168.192.1.78. Once other people connect to the network created by this router (either by WiFi or cable), they need to type &lt;code&gt;168.192.1.78:8787&lt;/code&gt; into any browser and can just start using RStudio. This will work as long as your computer is running Docker and you are all connected to the same router.&lt;/p&gt;
&lt;p&gt;I had 10 people connected to my laptop and, most of the time, the strain on my CPU was negligible - around 10-20%. That’s because it was a course for complete beginners and they were mostly reading the instructions (included in the training Notebooks they were running R code in). So they weren’t actually hitting Run at the same time, and the tasks weren’t computationally heavy. When we did ask everyone to hit the “Knit to PDF” button all at the same time, it got a bit slower and my CPU was apparently working at 200%. But nothing crashed and everyone got their PDFs made.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;why-are-you-calling-it-a-lan-party&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Why are you calling it a LAN party?&lt;/h2&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://riinu.me/img/lanparty2010.jpg&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;My friends and I having a LAN party in Estonia, 2010. We would mostly play StarCraft or Civilization, or as pictured here - racing games to wind down at the end.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;LAN stands for Local Area Network and in most cases means “devices connected to the same WiFi*”. You’ve probably used LANs lots in your life without even realising. One common example is printers: you know when a printer asks you to connect to the same network to be able to print your files? This usually means your computer and the printer will be in a LAN. If your printed accepted files via any internet connection, rather than just the same local network, then people around the world could submit stuff for your printer. Furthermore, if you have any smart devices in your home, they’ll be having a constant LAN party with each other.&lt;/p&gt;
&lt;p&gt;The term “LAN party” means people coming together to play multiplayer computer games - as it will allow people to play in the same “world”, to either build things together or fight with each other. Good internet access has made LAN parties practically obsolete - people and their computers no longer have to physically be in the same location to play multiplayer games together. I use the term very loosely to refer to anything fun happening on the same network. And being able to use RStudio is definitely a party in my books anyway.&lt;/p&gt;
&lt;p&gt;But it is for security reasons (e.g., the printer example), or sharing resources in places without excellent internet connection where LAN parties are still very much relevant.&lt;/p&gt;
&lt;p&gt;* Overall, most existing LANs operate via Ethernet cables (or “internet cables” as most people, including myself refer to them). WiFi LAN or WLAN is a type of LAN. Have a look at your home router, it will probably have different lights for “internet” and “WLAN”/“wireless”. A LAN can also be connected to the internet - if the router itself is connected to the internet. That’s the main purpose of a router - to take the internet coming into your house via a single Ethernet cable, and share it with all your other devices. A LAN is usually just a nice side-effect of that.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;docker-containers-images&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Docker, containers, images&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Docker image &lt;/strong&gt; - a file bundling an operating system + programs and files
&lt;strong&gt;Docker container&lt;/strong&gt; - a running image (it may be paused or stopped)&lt;/p&gt;
&lt;p&gt;List of all your containers: &lt;code&gt;docker ps -a&lt;/code&gt; (just &lt;code&gt;docker ps&lt;/code&gt; will list running containers, so the ones not stopped or paused)&lt;/p&gt;
&lt;p&gt;List your images: &lt;code&gt;docker images&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Run a container using an image:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -d -p 8787:8787 -e ROOT=TRUE -e USER=user -e PASSWORD=password rstudio/verse &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you run &lt;code&gt;rstudio/verse&lt;/code&gt; for the first time it will be downloaded into your images. The next time it will be taken directly from there, rather than downloaded. So you’ll only need internet access once.&lt;/p&gt;
&lt;p&gt;Stop an active container: &lt;code&gt;docker stop container-name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Start it up again: &lt;code&gt;docker start container-name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Save a container as an image (for versioning or passing on to other people):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker commit container-name pository:tag&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For example: &lt;code&gt;docker commit rstudio-server rstudio/riinu:test1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Rename container (by default it will get a random label, I’d change it to rstudio-server):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker rename happy_hippo rstudio-server&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can then start your container with: &lt;code&gt;docker start rstudio-server&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Converting old Wordpress posts to Hugo</title>
      <link>https://riinu.me/2018/02/converting-old-wordpress-posts-to-hugo/</link>
      <pubDate>Sat, 24 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://riinu.me/2018/02/converting-old-wordpress-posts-to-hugo/</guid>
      <description>


&lt;p&gt;Between 2014-2018 I published 29 posts on riinudata.wordpress.com. Today I’m converting all of those to my new website powered by &lt;a href=&#34;https://riinu.netlify.com/2018/02/hello-world/&#34;&gt;blogdown-Hugo&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;step-1&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Step 1&lt;/h2&gt;
&lt;p&gt;Read the &lt;a href=&#34;https://bookdown.org/yihui/blogdown/from-wordpress.html&#34;&gt;Migration: From Wordpress&lt;/a&gt; chapter of the &lt;strong&gt;blogdown&lt;/strong&gt; book.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;step-2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Step 2&lt;/h2&gt;
&lt;p&gt;Get all your wordpress posts into one XML: WP Admin - Tools - Export.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;step-3&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Step 3&lt;/h2&gt;
&lt;p&gt;Install &lt;a href=&#34;https://github.com/thomasf/exitwp&#34;&gt;Exitwp&lt;/a&gt; and its dependencies (&lt;code&gt;pyyamp&lt;/code&gt;, &lt;code&gt;beautifulsoup4&lt;/code&gt;, &lt;code&gt;html2text&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/thomasf/exitwp.git
sudo easy_install pip
sudo pip install pyyaml
sudo pip install beautifulsoup4
sudo pip install html2text&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This worked on macOS&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; High Sierra - I already had &lt;code&gt;python&lt;/code&gt; installed.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;step-4&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Step 4&lt;/h2&gt;
&lt;p&gt;Working in the directory that &lt;code&gt;git clone&lt;/code&gt; created (&lt;code&gt;exitwp&lt;/code&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Put the Wordpress XML in the wordpress-xml directory.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;xmllint riinu_wordpress.xml&lt;/code&gt;, worked the first time for me and I didn’t get any errors (so not sure what the &lt;strong&gt;fix errors if there are&lt;/strong&gt; would entail).&lt;/li&gt;
&lt;li&gt;Back in the &lt;code&gt;exitwp&lt;/code&gt; folder, run &lt;code&gt;python exitwp.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;This created folders &lt;code&gt;build/jekyll/riinudata.wordpress.com/_posts&lt;/code&gt; and the content looked like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://riinu.me/img/exitwp.png&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Move all these into &lt;code&gt;exitwp/post&lt;/code&gt; folder.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;step-5&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Step 5&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Take a copy of &lt;a href=&#34;https://github.com/yihui/oldblog_xml/blob/master/convert.R&#34; class=&#34;uri&#34;&gt;https://github.com/yihui/oldblog_xml/blob/master/convert.R&lt;/a&gt; to clean these .markdown files up and ready for Hugo. I edited the first three lines, skipped the “Do not run if…” chunk as I’d already done that in &lt;strong&gt;Step 3&lt;/strong&gt;, edited the &lt;code&gt;authors = c()&lt;/code&gt;, did not run the very last chunk (&lt;code&gt;local({if (!dir.exist...})&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Move all of the files (now &lt;code&gt;.md&lt;/code&gt;) into &lt;code&gt;content/post&lt;/code&gt; of your blogdown repo. Build and voila!&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;further-modifications&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Further modifications&lt;/h2&gt;
&lt;p&gt;Looks like most of my posts were converted like a charm, with nicely formatted code blocks and images. But I few things I noticed that I think I have to fix:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub gists are now displayed as links, will make those into code blocks (or embed them using a &lt;a href=&#34;http://blog.cronally.com/embed-gists-with-hugo/&#34;&gt;Hugo shortcodes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Most images show up perfectly, but some have gotten stuck in a code block, e.g. showing up as &lt;code&gt;&amp;lt;img src=&#34;https://riinudata.files.wordpress.com/2016/04/rplot.png&#34; alt=&#34;Rplot&#34;/&amp;gt;&lt;/code&gt;. Will sort these&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall I feared a lot worse and am super happy with the conversion experience. Took exactly 3 h.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://riinu.me/img/hilde_knit.jpg&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;My name is Hildegard and I approve this message.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;I’m only 1.5 years late to discover that OS X has been rebranded as macOS: &lt;a href=&#34;https://www.wired.com/2016/06/apple-os-x-dead-long-live-macos/&#34; class=&#34;uri&#34;&gt;https://www.wired.com/2016/06/apple-os-x-dead-long-live-macos/&lt;/a&gt;&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Hello world: blogdown loves Hugo</title>
      <link>https://riinu.me/2018/02/hello-world/</link>
      <pubDate>Mon, 12 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://riinu.me/2018/02/hello-world/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://riinudata.files.wordpress.com/2018/02/blogdown_hugo.png?w=736&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;we-are-live&#34;&gt;We are live!&lt;/h1&gt;
&lt;p&gt;I wrote my last blog post on Wordpress on 20-October 2017 and promised myself this was the last time. I&amp;rsquo;ve been blogging on Wordpress since 2014 and the more I used it the more painful it got! This is most likely caused by the fact that I have been thrifting further and further away from point-and-click interfaces anyway&amp;hellip;oh and discovering MARKDOWN.&lt;/p&gt;
&lt;h3 id=&#34;my-two-rules&#34;&gt;My two rules:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;text is written in Markdown (I use R Markdown/knitr/bookdown, e.g. see how easy it is to create a book: &lt;a href=&#34;https://surgicalinformatics.github.io/healthyr_book/&#34;&gt;&amp;ldquo;HealthyR: the eBook&amp;rdquo;&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;data analysis ends up in a Shiny app (e.g., see &lt;a href=&#34;https://riinu.me/2017/10/20/your-first-shiny-app/&#34;&gt;&amp;ldquo;If it’s not worth putting in a Shiny app it’s not worth doing.&amp;quot;&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;so-i-finally-got-round-to-creating-a-blogdown-hugo-site&#34;&gt;So I finally got round to creating a blogdown-Hugo site:&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; is a website generator that is code-based (no more dragging around those pesky Wordpress elements); &lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34;&gt;blogdown&lt;/a&gt; is an R package that will help you generate Hugo, Jekyll, or Hexo sites, especially if you will be including R Markdown in it.&lt;/p&gt;
&lt;h3 id=&#34;steps-on-12-february-2018&#34;&gt;Steps on 12-February 2018:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Created a new blogdown project on RStudio, set &lt;code&gt;kakawait/hugo-tranquilpeak-theme&lt;/code&gt; as the theme&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Edited my name, email etc. information in the &lt;em&gt;config.toml&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Absolutely could not figure out how to change &lt;code&gt;coverImage = &amp;quot;cover.jpg&amp;quot;&lt;/code&gt;. Tried putting my cover image in &lt;code&gt;/static/img/&lt;/code&gt;, &lt;code&gt;/static/_images/&lt;/code&gt;, &lt;code&gt;source/assets/images&lt;/code&gt; and tried linking to these any way I could think of (e.g. with and without the first &lt;code&gt;/&lt;/code&gt;) but it just wasn&amp;rsquo;t happening. Ended up putting my picture in &lt;code&gt;/themes/hugo-tranquilpeak-theme/static/images/&lt;/code&gt; and blatantly naming it &lt;code&gt;cover.jpg&lt;/code&gt; (replacing the theme&amp;rsquo;s default photo). This worked.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pushed the whole project to &lt;a href=&#34;https://github.com/riinuots/hugo-tranquil-website&#34;&gt;https://github.com/riinuots/hugo-tranquil-website&lt;/a&gt; and then created a submobule in &lt;a href=&#34;https://github.com/riinuots/hugo-tranquil-website/tree/master/themes&#34;&gt;https://github.com/riinuots/hugo-tranquil-website/tree/master/themes&lt;/a&gt; so when the theme gets updated I can pull the new version. This is not essential. I need to figure out the cover image issue though.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set up Netlify as in &lt;a href=&#34;https://bookdown.org/yihui/blogdown/netlify.html&#34;&gt;https://bookdown.org/yihui/blogdown/netlify.html&lt;/a&gt; which was superquick but then spent some time troubleshooting why my theme wasn&amp;rsquo;t displaying properly. Turns out that for this theme, it is essential to set the &lt;code&gt;baseURL = &amp;quot;https://riinu.netlify.com/&amp;quot;&lt;/code&gt; (in &lt;em&gt;config.toml&lt;/em&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Created this Hello World post which seemed to work fine at first. I then added an unquoted semicolon to the title, broke everything and spent 2 h trying to figure out what went wrong. These were the errors I was getting and that no-one else in the world (Google) seemed to have reported:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;edits to the new post not happening, but the site isn&amp;rsquo;t broken either&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clean_site()&lt;/code&gt; errors with:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;rmarkdown::clean_site() Error in file.exists(files) : invalid &#39;file&#39; argument&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;after spending 2h on Google/github/rstudio/rmarkdown, blogdown book, blogdown repo, Hugo documentation, I finally came across &lt;code&gt;hugo -v&lt;/code&gt; (v for verbose). Noticed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;yaml: line 1: mapping values are not allowed in this context&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(which I had indeed seen before at some point during these 2 hours). Anyway, seeing it for the second time clicked - markdown thinks I&amp;rsquo;m mapping something that shouldn&amp;rsquo;t be mapped (mapping usually means defining variables). My title was (second line of the markdown file, really) &lt;code&gt;title: Hello world: blogdown loves Hugo&lt;/code&gt;, but if using a semicolon you need quotes: &lt;code&gt;title: &amp;quot;Hello world: blogdown loves Hugo&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;still-better-than-wordpress&#34;&gt;Still better than Wordpress.&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://riinudata.files.wordpress.com/2018/02/pandas.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next steps:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Set up Disqus (comments).&lt;/li&gt;
&lt;li&gt;Bring over old posts from &lt;a href=&#34;https://riinudata.wordpress.com&#34;&gt;https://riinudata.wordpress.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Write all the new posts ideas I&amp;rsquo;ve been gathering over the past 4 months.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
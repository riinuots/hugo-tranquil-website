<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Riinu&#39;s scripting diary</title>
    <link>/categories/r/</link>
    <description>Recent content in R on Riinu&#39;s scripting diary</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Nov 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RStudio Server LAN party: Laptop&#43;Router&#43;Docker to serve RStudio offline</title>
      <link>/2019/11/rstudio-server-lan-party/</link>
      <pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/11/rstudio-server-lan-party/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#set-up&#34;&gt;Set-up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#why-are-you-calling-it-a-lan-party&#34;&gt;Why are you calling it a LAN party?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#docker-containers-images&#34;&gt;Docker, containers, images&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;TLDR: You can teach R on people’s own laptops without having them install anything or require an internet connection.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/healthyr_bus.png&#34; alt=&#34;Members of the Surgical Informatics team in Ghana, 2019. More information: surgicalinformatics.org&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Members of the Surgical Informatics team in Ghana, 2019. More information: surgicalinformatics.org&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Running R programming courses on people’s own laptops is a pain, especially as we use a lot of very useful extensions that actually make learning and using R much easier and more fun. But long installation instructions can be very off-putting for complete beginners, and &lt;strong&gt;people can be discouraged to learn programming if installation hurdles invoke their imposter syndrome&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We almost always run our courses in places with a good internet connection (it does not have to be super fast or flawless), so we get our students all set up on RStudio Server (hosted by us) or &lt;a href=&#34;https://rstudio.cloud&#34; class=&#34;uri&#34;&gt;https://rstudio.cloud&lt;/a&gt; (a free service provided by RStudio!).
You connect to either of these options using a web browser, and even very old computers can handle this. That’s because the actual computations happen on the server and not on the student’s computer. So the computer just serves as a window to the training instance used.&lt;/p&gt;
&lt;p&gt;Now, these options work really well as long as you have a stable internet connection. But for teaching R offline and on people’s own laptops, you either have to:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: lower-alpha&#34;&gt;
&lt;li&gt;make sure everyone installs everything correctly before they attend the course&lt;/li&gt;
&lt;li&gt;Download all the software and extensions, put them on USB sticks and try to install them together at the start&lt;/li&gt;
&lt;li&gt;start serving RStudio from a your computer using Local Area Network (LAN) created by a router&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, we already discussed why the first option is problematic (gatekeeper for complete beginners). The second option - installing everything at the start together - means that you start the course with the most boring part. &lt;strong&gt;And since everyone’s computers are different&lt;/strong&gt; (both by operating systems as well as different versions of the operating systems), &lt;strong&gt;this can take quite a while to sort&lt;/strong&gt;. Therefore, queue in option c) - an RStudio Server LAN party.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;requirements&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;A computer with more than 4GB of RAM.&lt;/strong&gt; macOS alone uses around 2-3GB just to keep going, and running the RStudio Server docker container was using another 3-4 GB, so you’ll definitely need more than 4GB in total.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A network router.&lt;/strong&gt; For a small number of participants, the same one you already have at home will work. Had to specify “network” here, as apparently, even my Google search for “router” suggests the power tool before network routers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker - free software&lt;/strong&gt;, dead easy to install on macOS (search the internet for “download Docker”). Looks like installation on the Windows Home operating system might be trickier. If you are a Windows Home user who is using Docker, please do post a link to your favourite instructions in the comments below.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Internet connection for setting up&lt;/strong&gt; - to download RStudio’s docker image and install your extra packages.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/docker_lan.png&#34; alt=&#34;My MacBook Pro serving RStudio to 10 other computers in Ghana, November 2019.&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;My MacBook Pro serving RStudio to 10 other computers in Ghana, November 2019.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;set-up&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Set-up&lt;/h2&gt;
&lt;p&gt;Running RStudio using Docker is so simple you won’t believe me. It honestly is just a single-liner to be entered into your Terminal (Command Prompt on Windows):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -d -p 8787:8787 -e ROOT=TRUE -e USER=user -e PASSWORD=password rstudio/verse &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will automatically download a Docker image put together by RStudio. The one called &lt;code&gt;verse&lt;/code&gt; includes all the tidyverse packages as well as publishing-related ones (R Markdown, Shiny, etc.). You can find a list of the difference ones here: &lt;a href=&#34;https://github.com/rocker-org/rocker&#34; class=&#34;uri&#34;&gt;https://github.com/rocker-org/rocker&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then open a browser and go to &lt;code&gt;localhost:8787&lt;/code&gt; and you should be greeted with an RStudio Server login! (Localhost only works on a Mac or Linux, if using Windows, take a note of your IP address and use that instead of &lt;code&gt;localhost&lt;/code&gt;.) More information and instructions can be found here: &lt;a href=&#34;https://github.com/rocker-org/rocker/wiki/Using-the-RStudio-image&#34; class=&#34;uri&#34;&gt;https://github.com/rocker-org/rocker/wiki/Using-the-RStudio-image&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tip: RStudio suggests port 8787, which is what I used for consistency, but if you set it up on 80 you can omit the :80 as that’s the default anyway. So you can just go to &lt;code&gt;localhost&lt;/code&gt; (or something like &lt;code&gt;127.0.0.0&lt;/code&gt; if using Windows).&lt;/p&gt;
&lt;p&gt;For those of you who have never seen or used RStudio Server, this is what it looks like:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/rstudio_server.png&#34; alt=&#34;Rstudio Server is almost identical to RStudio Desktop. Main difference is the “Upload” button in the Files pane. This one is running in a Docker container, served at port 8787, and accessed using Safari (but any web browser will work).&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Rstudio Server is almost identical to RStudio Desktop. Main difference is the “Upload” button in the Files pane. This one is running in a Docker container, served at port 8787, and accessed using Safari (but any web browser will work).&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The Docker single-liner above will create a single user with sudo rights (since I’ve included &lt;code&gt;-e ROOT=TRUE&lt;/code&gt;). After logging into the instance, you can then add other users and copy the course materials to everyone using these scripts: &lt;a href=&#34;https://github.com/einarpius/create_rstudio_users&#34; class=&#34;uri&#34;&gt;https://github.com/einarpius/create_rstudio_users&lt;/a&gt; Note that the instance is running Debian, so you’ll need very basic familiarity with managing file permissions on the command line. For example, you’ll need to make the scripts executable with &lt;code&gt;chmod 700 create_users.sh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then connect to the same router you’ll be using for your LAN party, go to router settings and assign yourself a fixed IP address, e.g., 168.192.1.78. Once other people connect to the network created by this router (either by WiFi or cable), they need to type &lt;code&gt;168.192.1.78:8787&lt;/code&gt; into any browser and can just start using RStudio. This will work as long as your computer is running Docker and you are all connected to the same router.&lt;/p&gt;
&lt;p&gt;I had 10 people connected to my laptop and, most of the time, the strain on my CPU was negligible - around 10-20%. That’s because it was a course for complete beginners and they were mostly reading the instructions (included in the training Notebooks they were running R code in). So they weren’t actually hitting Run at the same time, and the tasks weren’t computationally heavy. When we did ask everyone to hit the “Knit to PDF” button all at the same time, it got a bit slower and my CPU was apparently working at 200%. But nothing crashed and everyone got their PDFs made.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;why-are-you-calling-it-a-lan-party&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Why are you calling it a LAN party?&lt;/h2&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/lanparty2010.jpg&#34; alt=&#34;My friends and I having a LAN party in Estonia, 2010. We would mostly play StarCraft or Civilization, or as pictured here - racing games to wind down at the end.&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;My friends and I having a LAN party in Estonia, 2010. We would mostly play StarCraft or Civilization, or as pictured here - racing games to wind down at the end.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;LAN stands for Local Area Network and in most cases means “devices connected to the same WiFi*”. You’ve probably used LANs lots in your life without even realising. One common example is printers: you know when a printer asks you to connect to the same network to be able to print your files? This usually means your computer and the printer will be in a LAN. If your printed accepted files via any internet connection, rather than just the same local network, then people around the world could submit stuff for your printer. Furthermore, if you have any smart devices in your home, they’ll be having a constant LAN party with each other.&lt;/p&gt;
&lt;p&gt;The term “LAN party” means people coming together to play multiplayer computer games - as it will allow people to play in the same “world”, to either build things together or fight with each other. Good internet access has made LAN parties practically obsolete - people and their computers no longer have to physically be in the same location to play multiplayer games together. I use the term very loosely to refer to anything fun happening on the same network. And being able to use RStudio is definitely a party in my books anyway.&lt;/p&gt;
&lt;p&gt;But it is for security reasons (e.g., the printer example), or sharing resources in places without excellent internet connection where LAN parties are still very much relevant.&lt;/p&gt;
&lt;p&gt;* Overall, most existing LANs operate via Ethernet cables (or “internet cables” as most people, including myself refer to them). WiFi LAN or WLAN is a type of LAN. Have a look at your home router, it will probably have different lights for “internet” and “WLAN”/“wireless”. A LAN can also be connected to the internet - if the router itself is connected to the internet. That’s the main purpose of a router - to take the internet coming into your house via a single Ethernet cable, and share it with all your other devices. A LAN is usually just a nice side-effect of that.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;docker-containers-images&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Docker, containers, images&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Docker image &lt;/strong&gt; - a file bundling an operating system + programs and files
&lt;strong&gt;Docker container&lt;/strong&gt; - a running image (it may be paused or stopped)&lt;/p&gt;
&lt;p&gt;List of all your containers: &lt;code&gt;docker ps -a&lt;/code&gt; (just &lt;code&gt;docker ps&lt;/code&gt; will list running containers, so the ones not stopped or paused)&lt;/p&gt;
&lt;p&gt;List your images: &lt;code&gt;docker images&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Run a container using an image:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -d -p 8787:8787 -e ROOT=TRUE -e USER=user -e PASSWORD=password rstudio/verse &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you run &lt;code&gt;rstudio/verse&lt;/code&gt; for the first time it will be downloaded into your images. The next time it will be taken directly from there, rather than downloaded. So you’ll only need internet access once.&lt;/p&gt;
&lt;p&gt;Stop an active container: &lt;code&gt;docker stop container-name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Start it up again: &lt;code&gt;docker start container-name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Save a container as an image (for versioning or passing on to other people):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker commit container-name pository:tag&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For example: &lt;code&gt;docker commit rstudio-server rstudio/riinu:test1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Rename container (by default it will get a random label, I’d change it to rstudio-server):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker rename happy_hippo rstudio-server&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can then start your container with: &lt;code&gt;docker start rstudio-server&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>New intuitive ways for reshaping data in R: long live pivot_longer() and pivot_wider()</title>
      <link>/2019/04/new-intuitive-ways-to-reshape-data-in-r/</link>
      <pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/04/new-intuitive-ways-to-reshape-data-in-r/</guid>
      <description>&lt;p&gt;TLDR: there are two new and very intuitive R functions for reshaping data: see &lt;a href=&#34;#examples&#34;&gt;Examples&lt;/a&gt; of &lt;code&gt;pivot_longer()&lt;/code&gt; and &lt;code&gt;pivot_wider()&lt;/code&gt; below. At the time of writing, these new functions are extremely fresh and only exist in the development version on GitHub (see &lt;a href=&#34;#installation&#34;&gt;Installation&lt;/a&gt;), we should probably wait for the tidyverse team to officially release them (in CRAN) before putting them into day-to-day use.&lt;/p&gt;
&lt;p&gt;Exciting!&lt;/p&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;The juxtapose of &lt;em&gt;data collection&lt;/em&gt; vs &lt;em&gt;data analysis&lt;/em&gt;: data that was very easy to collect, is probably very hard to analyse, and vice versa. For example, if data is collected/written down whichever format was most convenient at the time of data collection, it is probably not recorded in a regularly shaped table, with various bits of information in different parts of the document. And even if data is collected into a table, it is often intuitive (for data entry) to include information about the same variable in different columns. For example, look at this example data I just made up:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

candydata_raw = read_csv(&amp;quot;2019-04-07_candy_preference_data.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;candy_type&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;likes age: 5&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;likes age: 10&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;likes age: 15&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;gets age: 5&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;gets age: 10&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;gets age: 15&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For each candy type, there are 8 columns with values. But actually, these 8 columns capture a combination of 3 variables: &lt;code&gt;age&lt;/code&gt;, &lt;code&gt;likes&lt;/code&gt; and &lt;code&gt;eats&lt;/code&gt;. This is known as the wide format, and it is a convenient way to either note down or even present values. It is human-readable. For effective data analysis, however, we need data to be in the tidy data format, where each column is a single variable, and each row a single observation (&lt;a href=&#34;https://www.jstatsoft.org/article/view/v059i10&#34; class=&#34;uri&#34;&gt;https://www.jstatsoft.org/article/view/v059i10&lt;/a&gt;). It needs to be less human-readable and more computer-friendly.&lt;/p&gt;
&lt;p&gt;Some of you may remember now retired &lt;code&gt;reshape2::melt()&lt;/code&gt; or &lt;code&gt;reshape2::dcast()&lt;/code&gt;, and many of you (inclduing myself!) have struggled remebering the arguments for &lt;code&gt;tidyr::gather()&lt;/code&gt; and &lt;code&gt;tidyr::spread()&lt;/code&gt;. Based on extensive community feedback, the tidyverse team have reinveted these functions using both more intuitive names, as well as clearer syntax (arguments):&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Thanks to all 2649 (!!!) people who completed my survey about table shapes! I&amp;#39;ve done analysed the data at &lt;a href=&#34;https://t.co/hyu1o91xRm&#34;&gt;https://t.co/hyu1o91xRm&lt;/a&gt; and the new functions will be called pivot_longer() and pivot_wider() &lt;a href=&#34;https://twitter.com/hashtag/rstats?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#rstats&lt;/a&gt;&lt;/p&gt;&amp;mdash; Hadley Wickham (@hadleywickham) &lt;a href=&#34;https://twitter.com/hadleywickham/status/1109816130774986753?ref_src=twsrc%5Etfw&#34;&gt;March 24, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;/div&gt;
&lt;div id=&#34;installation20190407&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Installation&lt;/h1&gt;
&lt;p&gt;These functions were added just a month ago, so these functions are not yet included in the standard version of &lt;code&gt;tidyr&lt;/code&gt; that comes with &lt;code&gt;install.packages(&amp;quot;tidyverse&amp;quot;)&lt;/code&gt; or even &lt;code&gt;update.packages()&lt;/code&gt; (the current version of &lt;code&gt;tidyr&lt;/code&gt; on CRAN is 0.8.3). To play with the bleeding edge versions of R packages, run &lt;code&gt;install.packages(&amp;quot;devtools&amp;quot;)&lt;/code&gt; and then &lt;code&gt;devtools::install_github(&amp;quot;tidyverse/tidyr&amp;quot;)&lt;/code&gt;. If you are a Mac user and it asks you “Do you want to install from sources the package which needs compilation?”, say Yes.&lt;/p&gt;
&lt;p&gt;You might need to Restart R (Session menu at the top) and load &lt;code&gt;library(tidyverse)&lt;/code&gt; again. You can check whether you now have these functions installed by typing in &lt;code&gt;pivot_longer&lt;/code&gt; and pressing F1 - if a relevant Help tab pops open you got it.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;examples20190407&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Examples&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;candydata_longer = candydata_raw %&amp;gt;% 
  pivot_longer(contains(&amp;quot;age&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;candy_type&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;name&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;likes age: 5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;likes age: 10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;likes age: 15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;gets age: 5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;gets age: 10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;gets age: 15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;likes age: 5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;likes age: 10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;likes age: 15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;gets age: 5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;gets age: 10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;gets age: 15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Now, that’s already a lot better, but we still need to split the &lt;code&gt;name&lt;/code&gt; column into the two different variables it really includes. “name” is what &lt;code&gt;pivot_longer()&lt;/code&gt; calls this new column by default. Remember, each column is a single variable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;candydata_longer = candydata_raw %&amp;gt;% 
  pivot_longer(contains(&amp;quot;age&amp;quot;)) %&amp;gt;% 
  separate(name, into = c(&amp;quot;questions&amp;quot;, NA, &amp;quot;age&amp;quot;), convert = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;candy_type&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;questions&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;age&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;likes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;likes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;likes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;gets&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;gets&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;gets&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;likes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;likes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;likes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;gets&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;gets&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;gets&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;And &lt;code&gt;pivot_wider()&lt;/code&gt; can be used to do the reverse:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;candydata = candydata_longer %&amp;gt;% 
  pivot_wider(names_from = questions, values_from = value)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;candy_type&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;age&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;likes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;gets&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Chocolate&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Lollipop&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;It is important to spell out the arguments here (&lt;code&gt;names_from =&lt;/code&gt;, &lt;code&gt;values_frame =&lt;/code&gt;) since they are not the second and third arguments of &lt;code&gt;pivot_wider()&lt;/code&gt; (like they were in &lt;code&gt;spread()&lt;/code&gt;). Investigate the &lt;code&gt;pivot_wider+F1&lt;/code&gt; Help tab for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;wrap-up-and-notes&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Wrap-up and notes&lt;/h1&gt;
&lt;p&gt;Now these are datasets we can work with: each column is a variable, each row is an observation.&lt;/p&gt;
&lt;p&gt;Do not start replacing working and tested instances of &lt;code&gt;gather()&lt;/code&gt; or &lt;code&gt;spread()&lt;/code&gt; in your existing R code with these new functions. That is neither efficient nor necessary - &lt;code&gt;gather()&lt;/code&gt; and &lt;code&gt;spread()&lt;/code&gt; will remain in &lt;code&gt;tidyr&lt;/code&gt; to make sure people’s scripts don’t suddenly stop working. Meaning: &lt;code&gt;tidyr&lt;/code&gt; is backward compatible. But after these functions are officially released, I will start using them in all new scripts I write.&lt;/p&gt;
&lt;p&gt;I made the original messy columns still relatively nice to work with - no typos and reasonable delimiters. Usually, the labels are much worse and need the help of &lt;code&gt;janitor::clean_names()&lt;/code&gt;, &lt;code&gt;stringr::str_replace()&lt;/code&gt;, and multiple iterations of &lt;code&gt;tidyr::separate()&lt;/code&gt; to arrive at a nice tidy tibble/data frame.&lt;/p&gt;
&lt;div id=&#34;tidyrseparate-tips&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;tidyr::separate() tips:&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;into = c(&amp;quot;var1&amp;quot;, NA, &amp;quot;var2&amp;quot;)&lt;/code&gt; - now this is an amazing trick I only came across this week! This is a convenient way to drop useless (new) columns. Previously, I would have achieved the same result with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;... %&amp;gt;% 
    separate(..., into = c(&amp;quot;var1&amp;quot;, &amp;quot;drop&amp;quot;, &amp;quot;var2&amp;quot;)) %&amp;gt;% 
    select(-drop) %&amp;gt;% 
    ...
    &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;convert = TRUE&lt;/code&gt;: by default, &lt;code&gt;separate()&lt;/code&gt; creates new variables that are also just “characters”. This means our age would have been a chacter vector of, e.g., “5”, “10”, rather than 5, 10, and R wouldn’t have known how to do arithmetic on it. In this example, &lt;code&gt;convert = TRUE&lt;/code&gt; is equivalent to &lt;code&gt;mutate(age = as.numeric(age))&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Good luck!&lt;/p&gt;
&lt;p&gt;P.S. This is one of the coolest Tweets I’ve ever seen:&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;On this auspicious day, in honor of tidyr, I am pleased to re-introduce you to pivot_longer and pivot_wider. &lt;a href=&#34;https://twitter.com/hashtag/rstats?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#rstats&lt;/a&gt; &lt;a href=&#34;https://t.co/hj3zqYYbVf&#34;&gt;pic.twitter.com/hj3zqYYbVf&lt;/a&gt;&lt;/p&gt;&amp;mdash; Ian Lyttle (@ijlyttle) &lt;a href=&#34;https://twitter.com/ijlyttle/status/1112675046663876608?ref_src=twsrc%5Etfw&#34;&gt;April 1, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Global map of country names</title>
      <link>/2018/09/global-map-of-country-names/</link>
      <pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/09/global-map-of-country-names/</guid>
      <description>&lt;p&gt;This post demonstrates the use of two very cool R packages - &lt;code&gt;ggrepel&lt;/code&gt; and &lt;code&gt;patchwork&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ggrepel&lt;/code&gt; deals with overlapping text labels (Code#1 at the bottom of this post):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-09-16-global-map-of-country-names-and-patchwork_files/figure-html/code1-1.png&#34; width=&#34;384&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;patchwork&lt;/code&gt; is a very convenient new package for combining multiple different plots together (i.e. what we usually to use &lt;code&gt;grid&lt;/code&gt; and &lt;code&gt;gridExtra&lt;/code&gt; for).&lt;/p&gt;
&lt;p&gt;More info:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/slowkow/ggrepel&#34; class=&#34;uri&#34;&gt;https://github.com/slowkow/ggrepel&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/thomasp85/patchwork&#34; class=&#34;uri&#34;&gt;https://github.com/thomasp85/patchwork&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To really demonstrate the power of them, let’s make a global map of country names using &lt;code&gt;ggrepel&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(ggrepel)
library(patchwork)

# data from https://worldmap.harvard.edu/data/geonode:country_centroids_az8

orig_data = read_csv(&amp;quot;country_centroids_az8.csv&amp;quot;)


centroidsdata = orig_data %&amp;gt;% 
  select(country = admin, continent, lat = Latitude, lon = Longitude) %&amp;gt;% 
  filter(continent != &amp;quot;Seven seas (open ocean)&amp;quot; &amp;amp; continent != &amp;quot;Antarctica&amp;quot;) %&amp;gt;% 
  mutate(continent  = fct_collapse(continent, &amp;quot;Americas&amp;quot; = c(&amp;quot;North America&amp;quot;, &amp;quot;South America&amp;quot;)))

head(centroidsdata)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 4
##   country     continent   lat   lon
##   &amp;lt;chr&amp;gt;       &amp;lt;fct&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 Aruba       Americas   12.5 -70.0
## 2 Afghanistan Asia       33.8  66.0
## 3 Angola      Africa    -12.3  17.5
## 4 Anguilla    Americas   18.2 -63.1
## 5 Albania     Europe     41.1  20.0
## 6 Aland       Europe     60.2  20.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot1 = centroidsdata %&amp;gt;% 
  ggplot(aes(x = lon, y = lat, label = country, colour = continent)) +
  geom_text_repel(segment.alpha = 0)   +
  theme_void() +
  scale_color_brewer(palette = &amp;quot;Dark2&amp;quot;)

plot1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-09-16-global-map-of-country-names-and-patchwork_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;2304&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now this is very good already with hardly any overlapping labels and the world is pretty recognisable. And really, you can make this plot with just 2 lines of code:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(centroidsdata, aes(x = lon, y = lat, label = country)) +
geom_text_repel(segment.alpha = 0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So what these two lines make is already very amazing.&lt;/p&gt;
&lt;p&gt;But I feel like Europe is a little bit misshapen and that the Caribbean and Africa are too close together. So I divided the world into regions (in this case same as continents except Russia is it’s own region - it’s just so big). Then wrote two functions that asked &lt;code&gt;ggrepel&lt;/code&gt; to plot each region separately and use &lt;code&gt;patchwork&lt;/code&gt; to patch each region together:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;centroidsdata = centroidsdata %&amp;gt;% 
  mutate(region = continent %&amp;gt;% fct_expand(&amp;quot;Russia&amp;quot;)) %&amp;gt;% 
  mutate(region = replace(region, country == &amp;quot;Russia&amp;quot;, &amp;quot;Russia&amp;quot;))

mapbounds = centroidsdata %&amp;gt;% 
  group_by(region) %&amp;gt;% 
  summarise(xmin = min(lon), xmax = max(lon), ymin = min(lat), ymax = max(lat))


create_labelmap = function(mydata, mycontinent, myforce = 1, mycolour = &amp;quot;black&amp;quot;){
  
  mymapbounds = mapbounds %&amp;gt;% 
    filter(region == mycontinent)
  
  mydata %&amp;gt;% 
    filter(region == mycontinent) %&amp;gt;% 
    ggplot(aes(x = lon, y = lat, label = country)) +
    geom_text_repel(segment.alpha = 0, force = myforce, colour = mycolour)   +
    theme_void() +
    theme(legend.position = &amp;quot;none&amp;quot;) +
    scale_y_continuous(limits = c(mymapbounds$ymin, mymapbounds$ymax)) +
    scale_x_continuous(limits = c(mymapbounds$xmin, mymapbounds$xmax))
  
}

mycolours = RColorBrewer::brewer.pal(5,&amp;quot;Dark2&amp;quot;)

make_world = function(mydata){
  mydata  = centroidsdata
  afr = create_labelmap(mydata, &amp;quot;Africa&amp;quot;,   mycolour = mycolours[1])
  ame = create_labelmap(mydata, &amp;quot;Americas&amp;quot;, mycolour = mycolours[4])
  asi = create_labelmap(mydata, &amp;quot;Asia&amp;quot;,     mycolour = mycolours[2])
  eur = create_labelmap(mydata, &amp;quot;Europe&amp;quot;,   mycolour = mycolours[3])
  rus = create_labelmap(mydata, &amp;quot;Russia&amp;quot;,   mycolour = mycolours[3])
  oce = create_labelmap(mydata, &amp;quot;Oceania&amp;quot;,  mycolour = mycolours[5])

  
  (ame + (eur / afr) + (rus / asi / oce)) + plot_layout(ncol = 3)
}

plot2 = make_world(centroidsdata)

plot2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-09-16-global-map-of-country-names-and-patchwork_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;2304&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This gives continents a much better shape, but it does severaly misplace Polynesia. See if you can find where, e.g., Tonga is and where it should be.&lt;/p&gt;
&lt;p&gt;To see what I did with patchwork there, let’s add black borders to each region (Code#2):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-09-16-global-map-of-country-names-and-patchwork_files/figure-html/code2-1.png&#34; width=&#34;2304&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Code#1:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#devtools::install_github(&amp;quot;slowkow/ggrepel&amp;quot;)
#devtools::install_github(&amp;quot;thomasp85/patchwork&amp;quot;)


library(tidyverse)
library(ggrepel)
library(patchwork)

mydata  = data_frame(x = c(1, 1.3), y = c(1, 1), mylabel = c(&amp;quot;Point-1&amp;quot;, &amp;quot;Point-2&amp;quot;))

p = mydata %&amp;gt;% 
  ggplot(aes(x, y, label = mylabel, colour = mylabel)) +
  geom_point() +
  coord_cartesian(xlim = c(-3, 3), ylim = c(-3, 3)) +
  theme_bw() +
  theme(legend.position = &amp;quot;none&amp;quot;) +
  scale_colour_viridis_d()

plot1 = p + geom_text() + ggtitle(&amp;quot;geom_text()&amp;quot;)

plot2 = p+ geom_text_repel() + ggtitle(&amp;quot;geom_text_repel()&amp;quot;)

plot1 + plot2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Code#2:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;create_labelmap = function(mydata, mycontinent, myforce = 1, mycolour = &amp;quot;black&amp;quot;){
  
  mymapbounds = mapbounds %&amp;gt;% 
    filter(region == mycontinent)
  
  mydata %&amp;gt;% 
    filter(region == mycontinent) %&amp;gt;% 
    ggplot(aes(x = lon, y = lat, label = country)) +
    geom_text_repel(segment.alpha = 0, force = myforce, colour = mycolour)   +
    theme_void() +
    theme(legend.position = &amp;quot;none&amp;quot;) +
    scale_y_continuous(limits = c(mymapbounds$ymin, mymapbounds$ymax)) +
    scale_x_continuous(limits = c(mymapbounds$xmin, mymapbounds$xmax)) +
    theme(panel.border = element_rect(colour = &amp;quot;black&amp;quot;, fill=NA, size=5))
  
}

plot3 = make_world(centroidsdata)

plot3&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Your first Shiny app</title>
      <link>/2017/10/your-first-shiny-app/</link>
      <pubDate>Fri, 20 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/10/your-first-shiny-app/</guid>
      <description>

&lt;h3 id=&#34;what-is-shiny&#34;&gt;What is Shiny?&lt;/h3&gt;

&lt;p&gt;Shiny is an R package (&lt;code&gt;install.packages(&amp;quot;shiny&amp;quot;)&lt;/code&gt;) for making your outputs interactive. Furthermore, Shiny creates web apps meaning your work can be shared online with people who don&amp;rsquo;t use R. In other words: with Shiny, R people can make websites without ever learning Javascript etc.&lt;/p&gt;

&lt;p&gt;I am completely obsessed with Shiny and these days I end up presenting most of my work in a Shiny app.&lt;/p&gt;

&lt;div class=&#34;alert info &#34;&gt;
  &lt;p&gt;If it&amp;rsquo;s not worth putting in a Shiny app it&amp;rsquo;s not worth doing.&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&#34;your-first-shiny-app&#34;&gt;Your first Shiny app&lt;/h3&gt;

&lt;p&gt;Getting started with Shiny is actually a lot easier than a lot of people make it out to be. So I created a very short (9 slides) presentation outlining my 5-step programme for your first Shiny app.&lt;/p&gt;

&lt;p&gt;This is the app: &lt;a href=&#34;https://riinu.shinyapps.io/shiny_testing/&#34;&gt;https://riinu.shinyapps.io/shiny_testing/&lt;/a&gt;&lt;/p&gt;

&lt;iframe src=&#34;https://riinu.shinyapps.io/shiny_testing/&#34; width=&#34;600&#34; height=&#34;600&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;This is the presentation: &lt;a href=&#34;http://rpubs.com/riinu/shiny&#34;&gt;http://rpubs.com/riinu/shiny&lt;/a&gt;&lt;/p&gt;

&lt;iframe src=&#34;http://rpubs.com/riinu/shiny&#34; width=&#34;1000&#34; height=&#34;800&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;And here are the steps (also included in the presentation):&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 0&lt;/strong&gt;: &lt;code&gt;install.packages(&amp;quot;shiny&amp;quot;)&lt;/code&gt;. Use RStudio.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 1&lt;/strong&gt;: Create a script called &lt;code&gt;app.R&lt;/code&gt; using this skeleton:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/riinuots/c6ec0691633df2929adc7de90bdbc792&#34;&gt;https://gist.github.com/riinuots/c6ec0691633df2929adc7de90bdbc792&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 2&lt;/strong&gt;: Copy your plot code into the renderPlot function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 3&lt;/strong&gt;: Add a &lt;code&gt;sliderInput&lt;/code&gt; to your User Interface (&lt;code&gt;ui&lt;/code&gt;). A slider is just one of the many Shiny widgets you could be using: &lt;a href=&#34;https://shiny.rstudio.com/gallery/widget-gallery.html&#34;&gt;https://shiny.rstudio.com/gallery/widget-gallery.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 4&lt;/strong&gt;: Tell your Server you wish the &lt;code&gt;dplyr::filter()&lt;/code&gt; to use the value from the slider. All inputs from the User Interface (&lt;code&gt;ui&lt;/code&gt;) are stored in &lt;code&gt;input$variable_name&lt;/code&gt;: replace the &lt;code&gt;2007&lt;/code&gt; with &lt;code&gt;input$year&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 5 (optional)&lt;/strong&gt;: Add &lt;code&gt;animate = TRUE.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Press &lt;code&gt;Control+Shift+Enter&lt;/code&gt; or the &amp;ldquo;Run App&amp;rdquo; button. You now have a Shiny app running on your computer. To deploy it to the internet, e.g. like I&amp;rsquo;ve done in the link above, see &lt;a href=&#34;http://docs.rstudio.com/shinyapps.io/getting-started.html#deploying-applications&#34;&gt;this.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>R: Replacing NAs in all factors with &#39;Missing&#39;</title>
      <link>/2017/07/r-replacing-nas-in-all-factors-with-missing/</link>
      <pubDate>Wed, 19 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/07/r-replacing-nas-in-all-factors-with-missing/</guid>
      <description>&lt;p&gt;With a simple combination of &lt;code&gt;mutate_if&lt;/code&gt; and &lt;code&gt;fct_explicit_na,&lt;/code&gt;you can replace all NAs in all factors with &amp;ldquo;Missing&amp;rdquo;:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/riinuots/e517c36b1feb480df981721a00e0e24a.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;code&gt;dplyr&lt;/code&gt; reference: &lt;a href=&#34;http://dplyr.tidyverse.org/reference&#34;&gt;http://dplyr.tidyverse.org/reference&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;forcats&lt;/code&gt; reference: &lt;a href=&#34;http://dplyr.tidyverse.org/reference&#34;&gt;http://dplyr.tidyverse.org/reference&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get data from ggplot()</title>
      <link>/2016/12/get-data-from-ggplot/</link>
      <pubDate>Tue, 06 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/12/get-data-from-ggplot/</guid>
      <description>&lt;p&gt;&lt;strong&gt;ggplot&lt;/strong&gt; includes built in and seamless functionality that summarises your data before plotting it. As shown in the example below, &lt;code&gt;ggplot_build()&lt;/code&gt; can be used to access the summarised dataset.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://riinudata.files.wordpress.com/2016/12/summarised_barplot.png&#34; alt=&#34;summarised_barplot&#34; /&gt;&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/riinuots/a6af08ac11f7b5ede69572a7559a704b.js&#34;&gt;&lt;/script&gt;

&lt;pre&gt;&lt;code&gt;fill         y count prop x PANEL group    ...
#D7301F 0.2147239    35    1 1     1     4 ...
#FC8D59 0.6871166    77    1 1     1     3 ...
#FDCC8A 0.9570552    44    1 1     1     2 ...
#FEF0D9 1.0000000     7    1 1     1     1 ...
#D7301F 0.1696429    38    1 2     1     8 ...
#FC8D59 0.6116071    99    1 2     1     7 ...
...
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>R lingua: library vs package</title>
      <link>/2016/10/r-lingua-library-vs-package/</link>
      <pubDate>Mon, 10 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/10/r-lingua-library-vs-package/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://riinudata.files.wordpress.com/2016/10/library_vs_package.jpg&#34; alt=&#34;library_vs_package&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>R: ISO codes and country names</title>
      <link>/2016/09/r-iso-codes-and-country-names/</link>
      <pubDate>Mon, 26 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/09/r-iso-codes-and-country-names/</guid>
      <description>&lt;p&gt;install.packages(&lt;span style=&#34;color:#0b6125;&#34;&gt;&amp;lsquo;maps&amp;rsquo;&lt;/span&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iso = maps::iso3166

&amp;gt; str(iso)
&#39;data.frame&#39;:   269 obs. of  5 variables:
 $ a2         : chr  &amp;quot;AW&amp;quot; ...
 $ a3         : chr  &amp;quot;ABW&amp;quot; ...
 $ ISOname    : chr  &amp;quot;Aruba&amp;quot; ..
 $ mapname    : chr  &amp;quot;Aruba&amp;quot; ...
 $ sovereignty: chr  &amp;quot;Netherlands&amp;quot; ...
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Add abcd labels on ggplot facets</title>
      <link>/2016/04/add-abcd-labels-on-ggplot-facets/</link>
      <pubDate>Sun, 17 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/04/add-abcd-labels-on-ggplot-facets/</guid>
      <description>&lt;script src=&#34;//gist.github.com/riinuots/25817167cfd397cacecdf6f38b473392.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;img src=&#34;https://riinudata.files.wordpress.com/2016/04/rplot.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How long did my R script run?</title>
      <link>/2016/04/how-long-did-my-script-run/</link>
      <pubDate>Fri, 15 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/04/how-long-did-my-script-run/</guid>
      <description>&lt;p&gt;This to the beginning:&lt;/p&gt;

&lt;p&gt;strt&amp;lt;-&lt;a href=&#34;http://inside-r.org/r-doc/base/Sys.time&#34;&gt;Sys.time&lt;/a&gt;()&lt;/p&gt;

&lt;p&gt;And this to the end:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://inside-r.org/r-doc/base/print&#34;&gt;print&lt;/a&gt;(&lt;a href=&#34;http://inside-r.org/r-doc/base/Sys.time&#34;&gt;Sys.time&lt;/a&gt;()-strt)&lt;/p&gt;

&lt;p&gt;Example output:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;print(Sys.time()-strt)
Time difference of 16.39691 secs&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>How to &#34;increase&#34; array resolution in R (replicate each element both column-wise and row-wise)</title>
      <link>/2015/09/how-to-increase-array-resolution-in-r-replicate-each-element-both-column-wise-and-row-wise/</link>
      <pubDate>Sat, 12 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/2015/09/how-to-increase-array-resolution-in-r-replicate-each-element-both-column-wise-and-row-wise/</guid>
      <description>&lt;p&gt;One picture says more than a thousand words. You have what is one the left, and you want what is on the right.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://riinudata.files.wordpress.com/2015/09/resolution_cut.png&#34; alt=&#34;resolution_cut&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_matrix = matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow=3)

#matrix is a 2D array, this next row creates a third dimension,
#duplicating the data
my_array = array(my_matrix, dim = c(3,3,2))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a few different ways to do this, but by far the cleanest and quickest way is to just select the rows and columns multiple times, by replicating row and column numbers (instead of actually replicating each element):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#2D:
increased_matrix = my_matrix[rep(1:nrow(my_matrix), each=3), rep(1:ncol(my_matrix, each=3)]

#3D (same really, just one extra comma for the third dimension):
increased_array = my_array[rep(1:nrow(my_array), each=3), rep(1:ncol(my_array, each=3), ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that by default, in rep(something, n) the n is &lt;strong&gt;times&lt;/strong&gt; so equivalent to rep(something, times=n), but in this case we need to use &lt;strong&gt;each&lt;/strong&gt; instead of &lt;strong&gt;times&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Converting R Markdown to Latex</title>
      <link>/2015/06/converting-r-markdown-to-latex/</link>
      <pubDate>Wed, 24 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>/2015/06/converting-r-markdown-to-latex/</guid>
      <description>&lt;p&gt;Install Pandoc: &lt;a href=&#34;http://pandoc.org/&#34;&gt;http://pandoc.org/&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(knitr)

knit(&#39;report.Rmd&#39;) #This creates &#39;report.md&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open the Terminal, Command Prompt (search for cmd) or Windows Powershell, go to the folder and do:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pandoc -s report.md -o report.tex&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s it!&lt;/p&gt;

&lt;p&gt;(Read &lt;a href=&#34;http://proteo.me.uk/2013/06/generating-r-reports-with-vector-images-from-markdown-with-knitr/&#34;&gt;this&lt;/a&gt;, if you want vector images.)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reordering factor levels in R and what could go wrong</title>
      <link>/2015/06/reordering-factor-levels-in-r-and-what-could-go-wrong/</link>
      <pubDate>Thu, 11 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>/2015/06/reordering-factor-levels-in-r-and-what-could-go-wrong/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently started using &lt;a href=&#34;http://docs.ggplot2.org/current/&#34;&gt;ggplot2&lt;/a&gt; in addition to lattice (see &lt;a href=&#34;https://riinudata.wordpress.com/2014/08/08/r-graphical-devices-plot-margins-and-legend-next-to-the-plot-not-on-it/&#34;&gt;this post&lt;/a&gt; that I made a while ago, explaining how I got into using lattice in the first place). Hint: when using ggplot2, you&amp;rsquo;ll need to use of the reshape2 package (also written by the amazing Hadley Wickham) to get your data into a form that ggplot2 works best with. Another thing that you&amp;rsquo;ll want to think about when using ggplo2 is factor levels. This post will show how to (and also how not to) rearrange factor levels in R.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create a quick barplot with strings as x labels.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggplot2)

#create dummy data
a = paste(&#39;my&#39;, 1:11)
b = 1:11
df = data.frame(a, b)
df
qplot(a, b, data=df, geom=&#39;bar&#39;, stat=&#39;identity&#39;) +
  theme(axis.text=element_text(size=16, angle=45))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://riinudata.files.wordpress.com/2015/06/barplot1.png&#34; alt=&#34;barplot1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As df$a is an array of strings, R sets the factor levels alphabetically: my 1, my 10, my 11, my 2&amp;hellip;which is not what we want, so let&amp;rsquo;s rearrange factor levels:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df$a = factor(df$a, levels = paste(&#39;my&#39;, 1:11))
df$a
qplot(a, b, data=df, geom=&#39;bar&#39;, stat=&#39;identity&#39;) +
  theme(axis.text=element_text(size=16, angle=45))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://riinudata.files.wordpress.com/2015/06/barplot2.png&#34; alt=&#34;barplot2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And finally, the wrong way to rearrange factor levels would be by using the levels() function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df = data.frame(a, b)
levels(df$a) = paste(&#39;my&#39;, 1:11)
qplot(a, b, data=df, geom=&#39;bar&#39;, stat=&#39;identity&#39;) +
  theme(axis.text=element_text(size=16, angle=45))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://riinudata.files.wordpress.com/2015/06/barplot3.png&#34; alt=&#34;barplot3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So be careful - if your data is not as obvious as this example and you are a bit new to factors and levels, you might end up plotting wrong results (like on the last example, &amp;ldquo;my 2&amp;rdquo; and &amp;ldquo;my 3&amp;rdquo; were plotted with the values 10 and 11).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why does a linear model without an intercept (forced through the origin) have a higher R-squared value? [calculated by R]</title>
      <link>/2014/08/why-does-linear-model-without-an-intercept-forced-through-the-origin-have-a-higher-r-squared-value-calculated-by-r/</link>
      <pubDate>Wed, 06 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>/2014/08/why-does-linear-model-without-an-intercept-forced-through-the-origin-have-a-higher-r-squared-value-calculated-by-r/</guid>
      <description>&lt;p&gt;&lt;em&gt;This is a short note based on &lt;a href=&#34;http://stats.stackexchange.com/questions/26176/removal-of-statistically-significant-intercept-term-boosts-r2-in-linear-model/26205#26205&#34;&gt;this&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Answer in short: Because different formulas are used to calculate the R-squared of a linear regression, depending on whether it has an intercept or not.&lt;/p&gt;

&lt;p&gt;R2 for a linear model that has an intercept:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://riinudata.files.wordpress.com/2014/08/codecogseqn.png&#34; alt=&#34;CodeCogsEqn&#34; /&gt;,&lt;/p&gt;

&lt;p&gt;where &lt;em&gt;&lt;strong&gt;y&lt;/strong&gt;&lt;/em&gt; is the variable that the linear model is trying to predict (the response variable), &lt;em&gt;y^&lt;/em&gt; is the predicted value and &lt;em&gt;y-&lt;/em&gt; is the mean value of the response variable.&lt;/p&gt;

&lt;p&gt;And the R2 for a linear model that is forced through the origin:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://riinudata.files.wordpress.com/2014/08/codecogseqn-2.png&#34; alt=&#34;CodeCogsEqn (2)&#34; /&gt;,&lt;/p&gt;

&lt;p&gt;basically the mean value of the response variable is removed from the equation, making the denominator bigger (and the result of the division smaller). The reason why the  mean can not be used for this calculation is that it does not make sense any more - forcing the fit through zero kind of means adding an infinite number of (0,0) points into the dataset.&lt;/p&gt;

&lt;p&gt;This means that the R-squared values of two different linear models (one with an intercept, one without) can not really be compared, because when the intercept is quite small compared to the residuals (basically the numerator) then the R2 &amp;ldquo;advantange&amp;rdquo; that the through-origin regression gets is relatively bigger than the decrease in residuals, when including the intercept.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>